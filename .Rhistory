scale_color_viridis() +
geom_contour()
batting.2018 %>%
ggplot(aes(x = OBP, y = SLG, z = batting.runs)) +
geom_point() +
stat_contour()
batting.2018 %>%
ggplot(aes(x = OBP, y = SLG, color = batting.runs)) +
geom_point() +
scale_color_viridis()
batting.2018 %>%
mutate(OBP.scaled = scale(OBP),
SLG.scaled = scale(SLG),
br.scaled = scale(batting.runs)) %>%
ggplot(aes(x = OBP.scaled, y = SLG.scaled, color = br.scaled)) +
geom_point() +
scale_color_viridis()
batting.2018 %>%
mutate(OBP.scaled = scale(OBP),
SLG.scaled = scale(SLG),
br.scaled = scale(batting.runs)) %>%
ggplot(aes(x = OBP.scaled, y = SLG.scaled, color = br.scaled)) +
geom_point() +
scale_color_viridis() +
geom_abline(slope = 1, intercept = 0)
coronavirus <- read_csv(file = "https://raw.githubusercontent.com/RamiKrispin/coronavirus-csv/master/coronavirus_dataset.csv")
coronavirus %>%
group_by(Country.Region, type, date) %>%
summarise(cases = sum(cases)) %>%
group_by(Country.Region, type) %>%
mutate(cases_cum = cumsum(cases))  -> covid_country
0.765/0.449
install.packages("Lahman")
library(tidyverse)
library(directlabels)
coronavirus <- read_csv(file = "https://raw.githubusercontent.com/RamiKrispin/coronavirus-csv/master/coronavirus_dataset.csv")
View(coronavirus)
coronavirus %>%
group_by(Country.Region, type, date) %>%
summarise(cases = sum(cases)) %>%
group_by(Country.Region, type) %>%
mutate(cases_cum = cumsum(cases))  -> covid_country
covid_country %>%
filter(Country.Region == "US") %>%
ggplot(aes(x = date, y = cases_cum, color = type)) +
geom_point() +
geom_line() +
labs(title = "United States", y = "Cumulative Cases") +
scale_color_manual(values =  c("green", "red", "blue"))
world <- map_data("world")
# Add coronavirus data
coronavirus %>%
filter(type == "confirmed") %>%
group_by(Country.Region, type) %>%
summarize(cases = sum(cases, na.rm = TRUE)) %>%
group_by() %>%
mutate(Country.Region = replace(Country.Region, Country.Region == "US","USA")) -> country.cases
world %>%
left_join(country.cases, by = c("region" = "Country.Region")) %>%
replace_na(list(cases = 0)) -> world
ggplot(data = world,
mapping = aes(x = long, y = lat,
group = group,
fill = cases)) +
geom_polygon(color = "gray90", size = 0.1) +
labs(title = "Election Results 2016", fill = NULL) +
theme_map() +
scale_fill_viridis()
ggplot(data = world,
mapping = aes(x = long, y = lat,
group = group,
fill = cases)) +
geom_polygon(color = "gray90", size = 0.1) +
labs(title = "Election Results 2016", fill = NULL) +
scale_fill_viridis()
library(viridis)
ggplot(data = world,
mapping = aes(x = long, y = lat,
group = group,
fill = cases)) +
geom_polygon(color = "gray90", size = 0.1) +
labs(title = "Election Results 2016", fill = NULL) +
scale_fill_viridis()
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE,
fig.height = 3,
message = FALSE,
warning = FALSE)
# Chunk 2
library(Lahman)
library(tidyverse)
library(plotly)
library(knitr)
# Calculate weights from run values using Retrosheet play-by-play data
# this code will only run if you have a 2018 retrosheet
# event-by-event data on your computer.
source("../MA388_Solutions/linear_weights.R")
weights <- linear_weights(2018) %>% pluck("weights")
weights %>% kable(digits = 3)
# Chunk 3
# 2018 Players with at least 500 at bats
vars = c("AB", "H", "X2B", "X3B", "HR", "BB",
"HBP", "SF","RBI")
Batting %>%
filter(yearID == 2018) %>%
group_by(playerID) %>%
summarise_at(vars, sum) %>%
filter(AB >= 500) %>%
left_join(Master %>% select(nameLast,nameFirst,playerID)) %>%
mutate(name = paste(nameFirst, nameLast, sep = " ")) %>%
select(name, everything(), -nameLast,-nameFirst) %>%
mutate(X1B = H - X2B - X3B - HR,
SLG = (X1B + 2*X2B + 3*X3B + 4*HR)/AB,
OBP = (H + HBP + BB)/(AB + HBP + SF + BB),
OPS = SLG + OBP,
AVG = H/AB) -> batting.2018
#calculates Batting Runs using Thorn and Palmer's condensed Linear Weights model.
#note statistics and weights have to be in the same order
batting_runs <- function(statistics, weights){
runs <- round(sum(statistics*weights),1)
return(runs)
}
batting.2018 %>%
group_by(playerID) %>%
mutate(batting.runs = batting_runs(statistics = c(X1B, X2B, X3B, BB + HBP, HR, AB - H),
weights = weights %>% pull(weight))) %>%
arrange(-batting.runs) %>%
group_by()-> batting.2018
batting.2018 %>%
select(name, AB, H, HR, RBI, AVG, OPS, batting.runs) %>%
head(10) %>%
kable(digits = 3,
caption = "Top 10 MLB Players (with at least 500 at bats) - Batting Runs 2018")
# Chunk 4
batting.2018 %>%
select(name, AB, H, HR, RBI, AVG, OPS, batting.runs) %>%
tail(10) %>%
kable(digits = 3,
caption = "Bottom 10 MLB Players (with at least 500 at bats) - Batting Runs 2018")
# Chunk 5
library(gridExtra)
title.size = 12
p.rbi <- batting.2018 %>%
ggplot(aes(label = name,
x = batting.runs,
y = RBI)) +
geom_point() +
labs(title = "Linear Weights vs. RBI") +
theme_classic() +
theme(plot.title = element_text(size = title.size))
p.avg <- batting.2018 %>%
ggplot(aes(label = name,
x = batting.runs,
y = AVG)) +
geom_point() +
labs(title = "Linear Weights vs. Batting Average") +
theme_classic() +
theme(plot.title = element_text(size = title.size))
p.slg <- batting.2018 %>%
ggplot(aes(label = name,
x = batting.runs,
y = SLG)) +
geom_point() +
labs(title = "Linear Weights vs. Slugging") +
theme_classic() +
theme(plot.title = element_text(size = title.size))
p.ops <- batting.2018 %>%
ggplot(aes(label = name,
x = batting.runs,
y = OPS)) +
geom_point() +
labs(title = "Linear Weights vs. OPS") + theme_classic() +
theme(plot.title = element_text(size = title.size))
grid.arrange(p.rbi,p.avg, p.slg, p.ops, ncol = 2)
ggplotly(p.rbi)
ggplotly(p.avg)
ggplotly(p.slg)
ggplotly(p.ops)
# Chunk 6
library(viridis)
batting.2018 %>%
mutate(OBP.scaled = scale(OBP),
SLG.scaled = scale(SLG),
br.scaled = scale(batting.runs)) %>%
ggplot(aes(x = OBP.scaled, y = SLG.scaled, color = br.scaled)) +
geom_point() +
scale_color_viridis() +
geom_abline(slope = 1, intercept = 0)
library(Lahman)
library(tidyverse)
library(plotly)
library(knitr)
vars = c("AB", "H", "X2B", "X3B", "HR", "BB",
"HBP", "SF","RBI")
Batting %>%
filter(yearID == 2018) %>%
group_by(playerID) %>%
summarise_at(vars, sum) %>%
filter(AB >= 500) %>%
left_join(Master %>% select(nameLast,nameFirst,playerID)) %>%
mutate(name = paste(nameFirst, nameLast, sep = " ")) %>%
select(name, everything(), -nameLast,-nameFirst) %>%
mutate(X1B = H - X2B - X3B - HR,
SLG = (X1B + 2*X2B + 3*X3B + 4*HR)/AB,
OBP = (H + HBP + BB)/(AB + HBP + SF + BB),
OPS = SLG + OBP,
AVG = H/AB) -> batting.2018
#calculates Batting Runs using Thorn and Palmer's condensed Linear Weights model.
#note statistics and weights have to be in the same order
batting_runs <- function(statistics, weights){
runs <- round(sum(statistics*weights),1)
return(runs)
}
batting.2018 %>%
group_by(playerID) %>%
mutate(batting.runs = batting_runs(statistics = c(X1B, X2B, X3B, BB + HBP, HR, AB - H),
weights = weights %>% pull(weight))) %>%
arrange(-batting.runs) %>%
group_by()-> batting.2018
batting.2018 %>%
select(name, AB, H, HR, RBI, AVG, OPS, batting.runs) %>%
head(10) %>%
kable(digits = 3,
caption = "Top 10 MLB Players (with at least 500 at bats) - Batting Runs 2018")
batting.2018 %>%
select(name, AB, H, HR, RBI, AVG, OPS, batting.runs) %>%
tail(10) %>%
kable(digits = 3,
caption = "Bottom 10 MLB Players (with at least 500 at bats) - Batting Runs 2018")
library(Lahman)
library(tidyverse)
library(plotly)
library(knitr)
# 2018 Players with at least 500 at bats
vars = c("AB", "H", "X2B", "X3B", "HR", "BB",
"HBP", "SF","RBI")
Batting %>%
filter(yearID == 2018) %>%
group_by(playerID) %>%
summarise_at(vars, sum) %>%
filter(AB >= 500) %>%
left_join(Master %>% select(nameLast,nameFirst,playerID)) %>%
mutate(name = paste(nameFirst, nameLast, sep = " ")) %>%
select(name, everything(), -nameLast,-nameFirst) %>%
mutate(X1B = H - X2B - X3B - HR,
SLG = (X1B + 2*X2B + 3*X3B + 4*HR)/AB,
OBP = (H + HBP + BB)/(AB + HBP + SF + BB),
OPS = SLG + OBP,
AVG = H/AB) -> batting.2018
#calculates Batting Runs using Thorn and Palmer's condensed Linear Weights model.
#note statistics and weights have to be in the same order
batting_runs <- function(statistics, weights){
runs <- round(sum(statistics*weights),1)
return(runs)
}
batting.2018 %>%
group_by(playerID) %>%
mutate(batting.runs = batting_runs(statistics = c(X1B, X2B, X3B, BB + HBP, HR, AB - H),
weights = weights %>% pull(weight))) %>%
arrange(-batting.runs) %>%
group_by()-> batting.2018
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE,
fig.height = 3,
message = FALSE,
warning = FALSE)
# Chunk 2
library(Lahman)
library(tidyverse)
library(plotly)
library(knitr)
# Calculate weights from run values using Retrosheet play-by-play data
# this code will only run if you have a 2018 retrosheet
# event-by-event data on your computer.
source("../MA388_Solutions/linear_weights.R")
weights <- linear_weights(2018) %>% pluck("weights")
weights %>% kable(digits = 3)
# Chunk 3
# 2018 Players with at least 500 at bats
vars = c("AB", "H", "X2B", "X3B", "HR", "BB",
"HBP", "SF","RBI")
Batting %>%
filter(yearID == 2018) %>%
group_by(playerID) %>%
summarise_at(vars, sum) %>%
filter(AB >= 500) %>%
left_join(Master %>% select(nameLast,nameFirst,playerID)) %>%
mutate(name = paste(nameFirst, nameLast, sep = " ")) %>%
select(name, everything(), -nameLast,-nameFirst) %>%
mutate(X1B = H - X2B - X3B - HR,
SLG = (X1B + 2*X2B + 3*X3B + 4*HR)/AB,
OBP = (H + HBP + BB)/(AB + HBP + SF + BB),
OPS = SLG + OBP,
AVG = H/AB) -> batting.2018
#calculates Batting Runs using Thorn and Palmer's condensed Linear Weights model.
#note statistics and weights have to be in the same order
batting_runs <- function(statistics, weights){
runs <- round(sum(statistics*weights),1)
return(runs)
}
batting.2018 %>%
group_by(playerID) %>%
mutate(batting.runs = batting_runs(statistics = c(X1B, X2B, X3B, BB + HBP, HR, AB - H),
weights = weights %>% pull(weight))) %>%
arrange(-batting.runs) %>%
group_by()-> batting.2018
batting.2018 %>%
select(name, AB, H, HR, RBI, AVG, OPS, batting.runs) %>%
head(10) %>%
kable(digits = 3,
caption = "Top 10 MLB Players (with at least 500 at bats) - Batting Runs 2018")
# Chunk 4
batting.2018 %>%
select(name, AB, H, HR, RBI, AVG, OPS, batting.runs) %>%
tail(10) %>%
kable(digits = 3,
caption = "Bottom 10 MLB Players (with at least 500 at bats) - Batting Runs 2018")
# Chunk 5
library(gridExtra)
title.size = 12
p.rbi <- batting.2018 %>%
ggplot(aes(label = name,
x = batting.runs,
y = RBI)) +
geom_point() +
labs(title = "Linear Weights vs. RBI") +
theme_classic() +
theme(plot.title = element_text(size = title.size))
p.avg <- batting.2018 %>%
ggplot(aes(label = name,
x = batting.runs,
y = AVG)) +
geom_point() +
labs(title = "Linear Weights vs. Batting Average") +
theme_classic() +
theme(plot.title = element_text(size = title.size))
p.slg <- batting.2018 %>%
ggplot(aes(label = name,
x = batting.runs,
y = SLG)) +
geom_point() +
labs(title = "Linear Weights vs. Slugging") +
theme_classic() +
theme(plot.title = element_text(size = title.size))
p.ops <- batting.2018 %>%
ggplot(aes(label = name,
x = batting.runs,
y = OPS)) +
geom_point() +
labs(title = "Linear Weights vs. OPS") + theme_classic() +
theme(plot.title = element_text(size = title.size))
grid.arrange(p.rbi,p.avg, p.slg, p.ops, ncol = 2)
ggplotly(p.rbi)
ggplotly(p.avg)
ggplotly(p.slg)
ggplotly(p.ops)
# Chunk 6
library(viridis)
batting.2018 %>%
mutate(OBP.scaled = scale(OBP),
SLG.scaled = scale(SLG),
br.scaled = scale(batting.runs)) %>%
ggplot(aes(x = OBP.scaled, y = SLG.scaled, color = br.scaled)) +
geom_point() +
scale_color_viridis() +
geom_abline(slope = 1, intercept = 0)
batting.2018 %>% head(5)
batting.2018 %>% write_csv(path = "./data/batting_2018.csv")
Teams %>%
filter(yearID == 2018) %>%
mutate(X1B = H - X2B - X3B - HR,
TB = X1B + 2*X2B + 3*X3B + 4*HR,
RCbasic = ((H + BB)*TB)/(AB + BB)) -> teams.2018
teams.2018
teams.2018 %>%
ggplot(aes(x = RCbasic, y = R)) +
geom_point()
library(ggrepel)
teams.2018 %>%
ggplot(aes(x = RCbasic, y = R, label = teamID)) +
geom_point() +
geom_text_repel()
Batting %>%
filter(yearID == 2018) %>%
mutate(X1B = H - X2B - X3B - HR,
TB = X1B + 2*X2B + 3*X3B + 4*HR,
RCbasic = ((H + BB)*TB)/(AB + BB)) -> batting.2018.all
batting.2018.all
batting.2018.all %>%
group_by(teamID) %>%
summarize(RCbasic.summed = sum(RCbasic))
batting.2018.all %>%
group_by(teamID) %>%
summarize(RCbasic.summed = sum(RCbasic, na.rm = TRUE))
teams.2018
batting.2018.all %>%
group_by(teamID) %>%
summarize(RCbasic.summed = sum(RCbasic, na.rm = TRUE))
batting.2018.all %>%
group_by(teamID) %>%
summarize(RCbasic.summed = sum(RCbasic, na.rm = TRUE)) %>%
right_join(teams.2018) -> teams.2018
teams.2018 %>%
ggplot(aes(x = RCbasic, y = RCbasic.summed)) +
geom_point()
teams.2018 %>%
ggplot(aes(x = RCbasic, y = RCbasic.summed)) +
geom_point() +
labs(x = "RC from team statistics",
y = "RC summed over individual players",
title = "Team RC and RC summed over players is very close")
batting.2018.all
teams.2018
teams.2018
left_join(select(teams.2018, teamID, RCbasic.summed)
)
batting.2018.all %>%
left_join(select(teams.2018, teamID, RCbasic.summed))
batting.2018.all %>%
left_join(select(teams.2018, teamID, RCbasic.summed)) %>%
group_by(teamID) %>%
mutate(RC.team.perc = RCbasic/RCbasic.summed) -> batting.2018.all
batting.2018.all
batting.2018.all %>%
ggplot(aes(fill = playerID, x = teamID, y = RC.team.perc)) +
geom_bar(position = "stack",
stat = "identify") +
theme(legend.position = "none")
batting.2018.all %>%
ggplot(aes(fill = playerID, x = teamID, y = RC.team.perc)) +
geom_bar(position = "stack",
stat = "identity") +
theme(legend.position = "none")
p1 <- batting.2018.all %>%
filter(lgID == "AL") %>%
ggplot(aes(fill = playerID, x = teamID, y = RC.team.perc)) +
geom_bar(position = "stack",
stat = "identity") +
theme(legend.position = "none")
library(plotly)
ggplotly(p1)
batting.2018.all %>%
left_join(select(teams.2018, teamID, RCbasic.summed)) %>%
group_by(teamID) %>%
mutate(RC.team.perc = RCbasic/RCbasic.summed) %>%
arrange(-RC.team.perc) -> batting.2018.all
p1 <- batting.2018.all %>%
filter(lgID == "AL") %>%
ggplot(aes(fill = playerID, x = teamID, y = RC.team.perc)) +
geom_bar(position = "stack",
stat = "identity") +
theme(legend.position = "none")
ggplotly(p1)
p1 <- batting.2018.all %>%
ggplot(aes(fill = playerID, x = teamID, y = RC.team.perc)) +
geom_bar(position = "stack",
stat = "identity") +
theme(legend.position = "none")
p1
ggplotly(p1)
batting.2018.all %>%
left_join(select(teams.2018, teamID, RCbasic.summed)) %>%
group_by(teamID) %>%
mutate(RC.team.perc = RCbasic/RCbasic.summed) %>%
arrange(-RC.team.perc) -> batting.2018.all
p1 <- batting.2018.all %>%
ggplot(aes(fill = playerID, x = teamID, y = RC.team.perc)) +
geom_bar(position = "stack",
stat = "identity") +
theme(legend.position = "none")
p1
batting.2018.all
View(batting.2018.all)
mutate(name = paste(nameFirst, nameLast, sep = " ") -> batting.2018.all
Batting %>%
Batting %>%
filter(yearID == 2018) %>%
mutate(X1B = H - X2B - X3B - HR,
TB = X1B + 2*X2B + 3*X3B + 4*HR,
RCbasic = ((H + BB)*TB)/(AB + BB)) %>%
left_join(select(Master,playerID, nameLast, nameFirst)) %>%
mutate(name = paste(nameFirst, nameLast, sep = " ")) -> batting.2018.all
batting.2018.all %>%
group_by(teamID) %>%
summarize(RCbasic.summed = sum(RCbasic, na.rm = TRUE)) %>%
right_join(teams.2018) -> teams.2018
teams.2018 %>%
ggplot(aes(x = RCbasic, y = RCbasic.summed)) +
geom_point() +
labs(x = "RC from team statistics",
y = "RC summed over individual players",
title = "Team RC and RC summed over players is very close")
batting.2018.all %>%
left_join(select(teams.2018, teamID, RCbasic.summed)) %>%
group_by(teamID) %>%
mutate(RC.team.perc = RCbasic/RCbasic.summed) %>%
arrange(-RC.team.perc) -> batting.2018.all
batting.2018.all %>%
select(name, teamID, R, RC.team.perc) %>%
kable(digits = 3,
caption = "Highest Percentage of Team's Runs Scored - 2018")
batting.2018.all %>%
select(name, teamID, R, RC.team.perc) %>%
head(10) %>%
kable(digits = 3,
caption = "Highest Percentage of Team's Runs Scored - 2018")
batting.2018.all %>%
select(name, teamID, R, RC.team.perc) %>%
head(10) %>%
kable(digits = 2,
caption = "Highest Percentage of Team's Runs Scored - 2018")
source('~/.active-rstudio-document', echo=TRUE)
