my_teams = Teams %>%
filter(yearID >= 1997, yearID <= 2001) %>%
mutate(RD = R - RA,
Wpct = W/(W + L))
#partition the data into five groups
my_teams %>% crossv_kfold(k = 5)
install.packages('tidymodels')
library(tidymodels)
#partition the data into five groups
my_teams %>% crossv_kfold(k = 5)
library(tidymodels)
#partition the data into five groups
my_teams %>% crossv_kfold(k = 5)
library(purrr)
#partition the data into five groups
my_teams %>% crossv_kfold(k = 5)
library(tidyverse)
library(Lahman)
#get the data
my_teams = Teams %>%
filter(yearID >= 1997, yearID <= 2001) %>%
mutate(RD = R - RA,
Wpct = W/(W + L))
#partition the data into five groups
partition = rep(1:5, length.out = 148)
partition
partition = sample(partition, replace = TRUE)
my_teams$partition = partition
# create empty vector to save RMSE for each fold
rmse = c()
test_teams = my_teams %>%
filter(partition == 1)
train_teams = my_teams %>%
filter(partition != 1)
#fit model
lin.fit.train = lm(Wpct ~ RD, data = train_teams)
coef(lin.fit.train)
#get predictions on test set
test_teams = test_teams %>%
mutate(Wpct.pred = coef(lin.fit.train)[1] + coef(lin.fit.train)[2]*RD)
View(test_teams)
#get predictions and residuals on test set
test_teams = test_teams %>%
mutate(Wpct.pred = coef(lin.fit.train)[1] + coef(lin.fit.train)[2]*RD,
.resid = Wpct - Wpct.pred)
rmse[1] = sqrt(mean(test_teams$.resid^2))
my_teams = Teams %>%
filter(yearID >= 1997, yearID <= 2001) %>%
mutate(RD = R - RA,
Wpct = W/(W + L))
#partition the data into five groups
set.seed(100)
partition = rep(1:5, length.out = 148)
partition = sample(partition, replace = TRUE)
my_teams$partition = partition
# create empty vector to save RMSE for each fold
rmse = c()
# perform cross validation
for(i in 1:5){
# test set
test_teams = my_teams %>%
filter(partition == i)
#training set
train_teams = my_teams %>%
filter(partition != i)
#fit model
lin.fit.train = lm(Wpct ~ RD, data = train_teams)
#get predictions and residuals on test set
test_teams = test_teams %>%
mutate(Wpct.pred = coef(lin.fit.train)[1] + coef(lin.fit.train)[2]*RD,
.resid = Wpct - Wpct.pred)
#calculate RMSE
rmse[i] = sqrt(mean(test_teams$.resid^2))
}
rmse
round(rmse,4)
mean(rmse)
round(mean(rmse),4)
round(162*mean(rmse),1)
round(162*rmse,1)
cubic.fit = lm(Wpct = RD + RD^2 + RD^3, data = my_teams)
cubic.fit = lm(Wpct ~ RD + RD^2 + RD^3, data = my_teams)
summary(cubic.fit)
cubic.fit = lm(Wpct ~ RD + I(RD^2) + I(RD^3), data = my_teams)
summary(cubic.fit)
cubic.fit = lm(Wpct ~ RD + I(RD^2) + I(RD^3) + I(RD^4), data = my_teams)
summary(cubic.fit)
cubic.fit = lm(Wpct ~ RD + I(RD^2) + I(RD^3) + I(RD^4) + I(RD^5), data = my_teams)
summary(cubic.fit)
lin.fit = lm(Wpct ~ RD, data = my_teams)
summary(lin.fit)
cubic.fit = lm(Wpct ~ RD + I(RD^2) + I(RD^3) + I(RD^4) + I(RD^5) + I(RD^6), data = my_teams)
summary(cubic.fit)
cubic.fit = lm(Wpct ~ RA + R + R*RD, data = my_teams)
summary(cubic.fit)
cubic.fit = lm(Wpct ~ RA + R + R*RD + I(R^2), data = my_teams)
summary(cubic.fit)
cubic.fit = lm(Wpct ~ RA + R + R*RA + I(R^2), data = my_teams)
summary(cubic.fit)
cubic.fit = lm(Wpct ~ HR + H + X2B + X3B, data = my_teams)
summary(cubic.fit)
cubic.fit = lm(Wpct ~ R + RA + HR + H + X2B + X3B, data = my_teams)
summary(cubic.fit)
cubic.fit = lm(Wpct ~ R + RA + HR + H + X2B + X3B + ERA, data = my_teams)
summary(cubic.fit)
library(tidyverse)
IOCT = read_csv(file = "https://raw.githubusercontent.com/kfcaby/MA388_Sabermetrics/master/IOCT_Data_Cleaned.csv")
sleep = data.frame()
View(sleep)
sleep = data.frame(ID = c(), Hours = c())
library(tidyverse)
library(Lahman)
joinManag <- Teams %>%
select(teamID,R,RA)
managerModDat <- Managers %>%
left_join(joinManag, by = "teamID") %>%
filter(W != 0, R != 0, yearID >= 2000, yearID <= 2009)%>%
group_by(playerID) %>%
mutate(logWratio = log(W/L),
logRratio = log(R/RA))
managerMod = lm(logWratio ~ 0 + logRratio, data = managerModDat)
sum(is.infinite(managerModDat$logRratio))
sum(is.infinite(managerModDat$logWratio))
managerModDat <- Managers %>%
left_join(joinManag, by = "teamID") %>%
filter(W != 0, R != 0, L!= 0, yearID >= 2000, yearID <= 2009)%>%
group_by(playerID) %>%
mutate(logWratio = log(W/L),
logRratio = log(R/RA))
managerMod = lm(logWratio ~ 0 + logRratio, data = managerModDat)
managerModDat %>%
filter(L == 0)
managerModDat <- Managers %>%
left_join(joinManag, by = "teamID") %>%
filter(W != 0, R != 0 yearID >= 2000, yearID <= 2009)%>%
group_by(playerID) %>%
mutate(logWratio = log(W/L),
logRratio = log(R/RA))
managerModDat <- Managers %>%
left_join(joinManag, by = "teamID") %>%
filter(W != 0, R != 0, yearID >= 2000, yearID <= 2009)%>%
group_by(playerID) %>%
mutate(logWratio = log(W/L),
logRratio = log(R/RA))
managerModDat %>%
filter(L == 0)
nrow(Managers)
managerModDat <- Managers %>%
left_join(joinManag, by = c("teamID","yearID")) %>%
filter(W != 0, R != 0, yearID >= 2000, yearID <= 2009)%>%
group_by(playerID) %>%
mutate(logWratio = log(W/L),
logRratio = log(R/RA))
joinManag <- Teams %>%
select(teamID,yearID,R,RA)
managerModDat <- Managers %>%
left_join(joinManag, by = c("teamID","yearID")) %>%
filter(W != 0, R != 0, yearID >= 2000, yearID <= 2009)%>%
group_by(playerID) %>%
mutate(logWratio = log(W/L),
logRratio = log(R/RA))
managerModDat <- Managers %>%
left_join(joinManag, by = c("teamID")) %>%
filter(W != 0, R != 0, yearID >= 2000, yearID <= 2009)%>%
group_by(playerID) %>%
mutate(logWratio = log(W/L),
logRratio = log(R/RA))
joinManag <- Teams %>%
select(teamID,yearID,R,RA)
managerModDat <- Managers %>%
left_join(joinManag, by = c("teamID")) %>%
filter(W != 0, R != 0, yearID >= 2000, yearID <= 2009)%>%
group_by(playerID) %>%
mutate(logWratio = log(W/L),
logRratio = log(R/RA))
managerModDat <- Managers %>%
left_join(joinManag, by = c("yearID")) %>%
filter(W != 0, R != 0, yearID >= 2000, yearID <= 2009)%>%
group_by(playerID) %>%
mutate(logWratio = log(W/L),
logRratio = log(R/RA))
joinManag <- Teams %>%
select(teamID,yearID,R,RA)
managerModDat <- Managers %>%
left_join(joinManag, by = c("yearID")) %>%
filter(W != 0, R != 0, yearID >= 2000, yearID <= 2009)%>%
group_by(playerID) %>%
mutate(logWratio = log(W/L),
logRratio = log(R/RA))
managerMod = lm(logWratio ~ 0 + logRratio, data = managerModDat)
Managers %>% filter(L == 0)
library(knitr)
library(tidyverse)
#column names
path = "https://raw.githubusercontent.com/maxtoki/baseball_R/master/data/"
file = "fields.csv"
fields <- read_csv(file = paste(path, file, sep=""))
data2016 <- read_csv(file = "./data/all2016.csv",
col_names = pull(fields, Header),
na = character())
#create some new variables
data2016 %>%
mutate(RUNS = AWAY_SCORE_CT + HOME_SCORE_CT,
HALF.INNING = paste(GAME_ID, INN_CT, BAT_HOME_ID),
RUNS.SCORED =
(BAT_DEST_ID > 3) + (RUN1_DEST_ID > 3) +
(RUN2_DEST_ID > 3) + (RUN3_DEST_ID > 3)) ->
data2016
#compute maximum total score for each half inning
data2016 %>%
group_by(HALF.INNING) %>%
summarize(Outs.Inning = sum(EVENT_OUTS_CT),
Runs.Inning = sum(RUNS.SCORED),
Runs.Start = first(RUNS),
MAX.RUNS = Runs.Inning + Runs.Start) ->
half_innings
#compute runs scored in remainder of the inning (ROI)
data2016 %>%
inner_join(half_innings, by = "HALF.INNING") %>%
mutate(RUNS.ROI = MAX.RUNS - RUNS) ->
data2016
#create a new variable for the current state
data2016 %>%
mutate(BASES =
paste(ifelse(BASE1_RUN_ID > '',1,0),
ifelse(BASE2_RUN_ID > '',1,0),
ifelse(BASE3_RUN_ID > '',1,0), sep = ""),
STATE = paste(BASES, OUTS_CT)) ->
data2016
#NRUNNER1 - indicator if 1st base is occupied after the play
data2016 %>%
mutate(NRUNNER1 =
as.numeric(RUN1_DEST_ID==1 | BAT_DEST_ID == 1),
NRUNNER2 =
as.numeric(RUN1_DEST_ID == 2 | RUN2_DEST_ID == 2 |
BAT_DEST_ID == 2),
NRUNNER3 =
as.numeric(RUN1_DEST_ID == 3 | RUN2_DEST_ID == 3 |
RUN3_DEST_ID == 3 | BAT_DEST_ID == 3),
NOUTS = OUTS_CT + EVENT_OUTS_CT,
NEW.BASES = paste(NRUNNER1,NRUNNER2, NRUNNER3, sep = ""),
NEW.STATE = paste(NEW.BASES, NOUTS)) ->
data2016
#only consider plays where the runners on base, outs, or runs scored changed
data2016 %>%
filter((STATE != NEW.STATE) | (RUNS.SCORED > 0)) ->
data2016
write_csv(data2016, path = "../MA388_Solutions/data2016.csv")
# Chunk 1
library(knitr)
include_graphics("run_expectancy.png")
# Chunk 2: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 3
library(tidyverse)
#column names
path = "https://raw.githubusercontent.com/maxtoki/baseball_R/master/data/"
file = "fields.csv"
fields <- read_csv(file = paste(path, file, sep=""))
#I recommend cadets download this file to their computers
#it's too big to keep getting from github
# https://raw.githubusercontent.com/kfcaby/MA388_Sabermetrics/master/data/all2016.csv
data2016 <- read_csv(file = "./data/all2016.csv",
col_names = pull(fields, Header),
na = character())
# Chunk 4
#create some new variables
data2016 %>%
mutate(RUNS = AWAY_SCORE_CT + HOME_SCORE_CT,
HALF.INNING = paste(GAME_ID, INN_CT, BAT_HOME_ID),
RUNS.SCORED =
(BAT_DEST_ID > 3) + (RUN1_DEST_ID > 3) +
(RUN2_DEST_ID > 3) + (RUN3_DEST_ID > 3)) ->
data2016
#compute maximum total score for each half inning
data2016 %>%
group_by(HALF.INNING) %>%
summarize(Outs.Inning = sum(EVENT_OUTS_CT),
Runs.Inning = sum(RUNS.SCORED),
Runs.Start = first(RUNS),
MAX.RUNS = Runs.Inning + Runs.Start) ->
half_innings
#compute runs scored in remainder of the inning (ROI)
data2016 %>%
inner_join(half_innings, by = "HALF.INNING") %>%
mutate(RUNS.ROI = MAX.RUNS - RUNS) ->
data2016
# Chunk 5
#create a new variable for the current state
data2016 %>%
mutate(BASES =
paste(ifelse(BASE1_RUN_ID > '',1,0),
ifelse(BASE2_RUN_ID > '',1,0),
ifelse(BASE3_RUN_ID > '',1,0), sep = ""),
STATE = paste(BASES, OUTS_CT)) ->
data2016
#NRUNNER1 - indicator if 1st base is occupied after the play
data2016 %>%
mutate(NRUNNER1 =
as.numeric(RUN1_DEST_ID==1 | BAT_DEST_ID == 1),
NRUNNER2 =
as.numeric(RUN1_DEST_ID == 2 | RUN2_DEST_ID == 2 |
BAT_DEST_ID == 2),
NRUNNER3 =
as.numeric(RUN1_DEST_ID == 3 | RUN2_DEST_ID == 3 |
RUN3_DEST_ID == 3 | BAT_DEST_ID == 3),
NOUTS = OUTS_CT + EVENT_OUTS_CT,
NEW.BASES = paste(NRUNNER1,NRUNNER2, NRUNNER3, sep = ""),
NEW.STATE = paste(NEW.BASES, NOUTS)) ->
data2016
#only consider plays where the runners on base, outs, or runs scored changed
data2016 %>%
filter((STATE != NEW.STATE) | (RUNS.SCORED > 0)) ->
data2016
#use only complete half-innings
data2016 %>%
filter(Outs.Inning == 3) -> data2016Complete
#calculate expected number of runs scored for remainder of inning
#for each bases/outs situation
data2016Complete %>%
group_by(STATE) %>%
summarize(Mean = mean(RUNS.ROI)) %>%
mutate(Outs = substr(STATE,5,5)) %>%
arrange(Outs) -> RUNS
RUNS_out = matrix(round(RUNS$Mean,2), 8,3)
colnames(RUNS_out) = c("0 outs", "1 out", "2 outs")
rownames(RUNS_out) = c("000","001","010","011",
"100","101","110", "111")
# Chunk 6
library(knitr)
kable(RUNS_out)
write_csv(data2016, path = "./data/data2016.csv")
source_data = read_csv(file = "/Users/kfcummiskey/Data/datasetUSzips2005.csv")
View(source_data)
source_data %>% select(IHD)
source_data = source_data %>% select(-RTI, PVD)
source_data = source_data %>% select(-PVD)
source_data = source_data %>% select(-IHD,-HRD, -HF, -CV_stroke,-COPD,-AMI,-ALL_CVD)
source_data = source_data %>% select(-total_death_FFS_MA,-Tot_den_for_death_MA_FFS)
source_data = source_data %>% select(-Total_den_FFS,-Person_year_FFS,-Black_rate, -White_rate, -Female_rate)
source_data %>% write_csv(path = "/Users/kfcummiskey/Data/datasetUSzips2005_no_outcome.csv")
source_data = read_csv(file = "/Users/kfcummiskey/Data/datasetUSzips2005_no_outcome.csv")
data2016 <- read_csv(file = "data/data2016.csv")
# Chunk 1
library(knitr)
include_graphics("run_expectancy.png")
# Chunk 2: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 3
library(tidyverse)
#column names
path = "https://raw.githubusercontent.com/maxtoki/baseball_R/master/data/"
file = "fields.csv"
fields <- read_csv(file = paste(path, file, sep=""))
#I recommend cadets download this file to their computers
#it's too big to keep getting from github
# https://raw.githubusercontent.com/kfcaby/MA388_Sabermetrics/master/data/all2016.csv
data2016 <- read_csv(file = "./data/all2016.csv",
col_names = pull(fields, Header),
na = character())
# Chunk 4
#create some new variables
data2016 %>%
mutate(RUNS = AWAY_SCORE_CT + HOME_SCORE_CT,
HALF.INNING = paste(GAME_ID, INN_CT, BAT_HOME_ID),
RUNS.SCORED =
(BAT_DEST_ID > 3) + (RUN1_DEST_ID > 3) +
(RUN2_DEST_ID > 3) + (RUN3_DEST_ID > 3)) ->
data2016
#compute maximum total score for each half inning
data2016 %>%
group_by(HALF.INNING) %>%
summarize(Outs.Inning = sum(EVENT_OUTS_CT),
Runs.Inning = sum(RUNS.SCORED),
Runs.Start = first(RUNS),
MAX.RUNS = Runs.Inning + Runs.Start) ->
half_innings
#compute runs scored in remainder of the inning (ROI)
data2016 %>%
inner_join(half_innings, by = "HALF.INNING") %>%
mutate(RUNS.ROI = MAX.RUNS - RUNS) ->
data2016
# Chunk 5
#create a new variable for the current state
data2016 %>%
mutate(BASES =
paste(ifelse(BASE1_RUN_ID > '',1,0),
ifelse(BASE2_RUN_ID > '',1,0),
ifelse(BASE3_RUN_ID > '',1,0), sep = ""),
STATE = paste(BASES, OUTS_CT)) ->
data2016
#NRUNNER1 - indicator if 1st base is occupied after the play
data2016 %>%
mutate(NRUNNER1 =
as.numeric(RUN1_DEST_ID==1 | BAT_DEST_ID == 1),
NRUNNER2 =
as.numeric(RUN1_DEST_ID == 2 | RUN2_DEST_ID == 2 |
BAT_DEST_ID == 2),
NRUNNER3 =
as.numeric(RUN1_DEST_ID == 3 | RUN2_DEST_ID == 3 |
RUN3_DEST_ID == 3 | BAT_DEST_ID == 3),
NOUTS = OUTS_CT + EVENT_OUTS_CT,
NEW.BASES = paste(NRUNNER1,NRUNNER2, NRUNNER3, sep = ""),
NEW.STATE = paste(NEW.BASES, NOUTS)) ->
data2016
#only consider plays where the runners on base, outs, or runs scored changed
data2016 %>%
filter((STATE != NEW.STATE) | (RUNS.SCORED > 0)) ->
data2016
#use only complete half-innings
data2016 %>%
filter(Outs.Inning == 3) -> data2016Complete
#calculate expected number of runs scored for remainder of inning
#for each bases/outs situation
data2016Complete %>%
group_by(STATE) %>%
summarize(Mean = mean(RUNS.ROI)) %>%
mutate(Outs = substr(STATE,5,5)) %>%
arrange(Outs) -> RUNS
RUNS_out = matrix(round(RUNS$Mean,2), 8,3)
colnames(RUNS_out) = c("0 outs", "1 out", "2 outs")
rownames(RUNS_out) = c("000","001","010","011",
"100","101","110", "111")
# Chunk 6
library(knitr)
kable(RUNS_out)
RUNS %>% write_csv(path = "./data/expectedRUNs2016.csv")
RUNS <- read_csv(file = "./data/expectedRUNs2016.csv")
RUNS
data2016 %>%
left_joint(select(RUNS, -Outs), by = "STATE") %>%
rename(Runs.State = Mean) %>%
left_join(select(RUNS, -Outs),
by = c("NEW.STATE" = "STATE")) %>%
rename(Runs.New.State = Mean) %>%
replace_na(list(Runs.New.State = 0)) %>%
mutate(run_value = Runs.New.State - Runs.State +
RUNS.SCORED) -> data2016
data2016 %>%
left_join(select(RUNS, -Outs), by = "STATE") %>%
rename(Runs.State = Mean) %>%
left_join(select(RUNS, -Outs),
by = c("NEW.STATE" = "STATE")) %>%
rename(Runs.New.State = Mean) %>%
replace_na(list(Runs.New.State = 0)) %>%
mutate(run_value = Runs.New.State - Runs.State +
RUNS.SCORED) -> data2016
data2016 %>% write_csv(path = "../MA388_Solutions/data2016.csv")
#get Altuve's playerID
Master %>%
filter(nameFirst == "Jose", nameLast == "Altuve") %>%
pull(retroID) -> altuve.id
library(Lahman)
#get Altuve's playerID
Master %>%
filter(nameFirst == "Jose", nameLast == "Altuve") %>%
pull(retroID) -> altuve.id
data2016 %>%
filter(BAT_ID == altuve.id,
BAT_EVENT_FL == TRUE) -> altuve
altuve %>%
select(STATE, NEW.STATE, run_value) %>%
slice(1:3)
library(tidyverse)
library(Lahman)
# load data2016 (as of page 115 in text) and RUNS (page 115 in text)
data2016 <- read_csv(file = "./data/data2016.csv")
RUNS <- read_csv(file = "./data/expectedRUNs2016.csv")
# add run value of the play (page 116)
data2016 %>%
left_join(select(RUNS, -Outs), by = "STATE") %>%
rename(Runs.State = Mean) %>%
left_join(select(RUNS, -Outs),
by = c("NEW.STATE" = "STATE")) %>%
rename(Runs.New.State = Mean) %>%
replace_na(list(Runs.New.State = 0)) %>%
mutate(run_value = Runs.New.State - Runs.State +
RUNS.SCORED) -> data2016
#get Altuve's playerID
Master %>%
filter(nameFirst == "Jose", nameLast == "Altuve") %>%
pull(retroID) -> altuve.id
data2016 %>%
filter(BAT_ID == altuve.id,
BAT_EVENT_FL == TRUE) -> altuve
altuve %>%
select(STATE, NEW.STATE, run_value) %>%
slice(1:3)
RUNS <- read_csv(file = "./data/expectedRUNs2016.csv")
library(tidyverse)
rownames(RUNS_out) = c("000","001","010","011",
"100","101","110", "111")
RUNS_out = matrix(round(RUNS$Mean,2), 8,3)
colnames(RUNS_out) = c("0 outs", "1 out", "2 outs")
rownames(RUNS_out) = c("000","001","010","011",
"100","101","110", "111")
kable(RUNS_out)
library(tidyverse)
kable(RUNS_out)
library(knitr)
kable(RUNS_out)
altuve %>%
ggplot(aes(x = BASES, y = run_value)) +
geom_jitter(width = 0.25, alpha = 0.5) +
geom_hline(yintercept = 0, color = "blue") +
xlab("RUNNERS")
altuve %>%
group_by(BASES) %>%
summarize(RUNS = sum(run_value),
PA = n()) -> Runs_Altuve
Runs_Altuve
Runs_Altuve %>% summarize(RE24 = sum(RUNS))
