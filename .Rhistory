geom_point() +
labs(x = "Batting Runs (Linear Weights Model",
y = "Runs Created - Basic",
title = "Linear Weights vs. Runs Created")
p1 <- batting.2018 %>%
ggplot(aes(x = batting.runs, y = RCbasic)) +
geom_point() +
labs(x = "Batting Runs (Linear Weights Model",
y = "Runs Created - Basic",
title = "Linear Weights vs. Runs Created")
ggplotly(p1)
p1 <- batting.2018 %>%
ggplot(aes(x = batting.runs,
y = RCbasic,
label = name)) +
geom_point() +
labs(x = "Batting Runs (Linear Weights Model",
y = "Runs Created - Basic",
title = "Linear Weights vs. Runs Created")
p1
ggplotly(p1)
remove.packages('baseballr')
devtools::install_github("BillPetti/baseballr")
install.packages('vroom')
devtools::install_github("BillPetti/baseballr")
library(baseballr)
library(tidyverse)
library(lubridate)
pitchesmlbgameday::
pitches <- scrape_statcast_savant(start_date = "2016-05-01", end_date = "2016-05-15")
library(baseballr)
remove.packages('baseballr')
devtools::install_github("BillPetti/baseballr")
library(baseballr)
pitchesmlbgameday::
pitches <- scrape_statcast_savant(start_date = "2016-05-01", end_date = "2016-05-15")
pitchesmlbgameday::
pitches <- scrape_statcast_savant(start_date = ymd("2016-05-01"), end_date = "2016-05-15")
pitchesmlbgameday::
pitches <- scrape_statcast_savant(start_date = "2016-05-01", end_date = "2016-05-15")
mlbgameday::get_payload(start = "2016-05-01", end = "2016-05-15") -> pitches
pitches <- read_csv(file = "data/pitches2016.csv")
View(pitches)
pitches <- read_csv(file = "data/pitches2016.csv")
View(teams.2018)
View(pitches)
pitches %>%
filter(type %in% c("B","C")) -> taken
# model for called strikes as a percent of taken pitches
model.count = gam(type == "C" ~ count, data = taken, family = "binomial")
library(mgcv)
# model for called strikes as a percent of taken pitches
model.count = gam(type == "C" ~ count, data = taken, family = "binomial")
summary(model.count)
# Here are predicted strike probabilities for 0-0, 0-2, 3-0
predict(model.count, newdata = data.frame(count = c("0-0","0-2","3-0")),
type = "response")
k_zone_plot %+% sample_n(taken, 10000) + aes(color = type) +
geom_point(alpha = 0.1) + scale_color_manual(values = c("blue", "black"))
source("kzoneplot.R")
source("kzoneplot.R")
source("kzoneplot.R")
k_zone_plot
k_zone_plot %+% sample_n(taken, 10000) + aes(color = type) +
geom_point(alpha = 0.1) + scale_color_manual(values = c("blue", "black"))
k_zone_plot %+% sample_n(taken, 10000) + aes(color = type) +
geom_point(alpha = 0.1) + scale_color_manual(values = c("blue", "black")) +
facet_wrap( ~ count)
k_zone_plot %+% taken+ aes(color = type) +
geom_point(alpha = 0.1) + scale_color_manual(values = c("blue", "black")) +
facet_wrap( ~ count)
k_zone_plot %+% taken+ aes(color = type) +
geom_point() +
facet_wrap( ~ count)
k_zone_plot %+% filter(taken, count %in% c("0-0","0-2","3-0")) + aes(color = type) +
geom_point() +
facet_wrap( ~ count)
k_zone_plot %+% filter(taken, count %in% c("0-0","0-2","3-0")) + aes(color = type) +
geom_point() +
facet_wrap( ~ count) +
scale_color_manual(values = c("blue", "black"))
model.count.pos_adj = gam(type == "C" ~ s(px,pz) + count, data = taken, family = "binomial")
summary(model.count.pos_adj)
predict(model.count, newdata = data.frame(px = -1, pz = 2.5,count = c("0-0","0-2","3-0")),
type = "response")
predict(model.count.pos_adj, newdata = data.frame(px = -1, pz = 2.5,count = c("0-0","0-2","3-0")),
type = "response")
# model for called strikes as a percent of taken pitches
model.count = gam(type == "C" ~ count, data = taken, family = "binomial")
summary(model.count)
# Here are predicted strike probabilities for 0-0, 0-2, 3-0
predict(model.count, newdata = data.frame(count = c("0-0","0-2","3-0")),
type = "response")
k_zone_plot %+% filter(taken, count %in% c("0-0","0-2","3-0")) + aes(color = type) +
geom_point() +
facet_wrap( ~ count) +
scale_color_manual(values = c("blue", "black"))
k_zone_plot %+% filter(taken, count %in% c("0-0","0-2","3-0")) + aes(color = type) +
geom_point() +
facet_wrap( ~ count) +
scale_color_manual(values = c("blue", "black"))
model.count.pos_adj = gam(type == "C" ~ s(px,pz) + count, data = taken, family = "binomial")
summary(model.count.pos_adj)
predict(model.count.pos_adj, newdata = data.frame(px = -1, pz = 2.5,count = c("0-0","0-2","3-0")),
type = "response")
# model for called strikes as a percent of taken pitches
model.count = gam(type == "C" ~ count, data = taken, family = "binomial")
summary(model.count)
# Here are predicted strike probabilities for 0-0, 0-2, 3-0
predict(model.count, newdata = data.frame(count = c("0-0","0-2","3-0")),
type = "response")
model.count.pos_adj = gam(type == "C" ~ s(px,pz) + count, data = taken, family = "binomial")
summary(model.count.pos_adj)
predict(model.count.pos_adj, newdata = data.frame(px = -1, pz = 2.5,count = c("0-0","0-2","3-0")),
type = "response")
#This pulls in all the functions from the Chapter8_functions file
source("Chapter8_functions.R")
#This pulls in all the functions from the Chapter8_functions file
source("/Users/kfcummiskey/Documents/MA388/Chapter8_functions.R")
update.packages('tinytex')
library(tinytex)
tlmgr_install('multirow')
tlmgr_install('multirow.sty')
library(knitr)
library(kableExtra)
data2018 <- read_csv(file = "data/all2008.csv")
library(tidyverse)
data2018 <- read_csv(file = "data/all2008.csv")
View(data2018)
data2018 <- read_csv(file = "data/all2016.csv")
data2018 <- read_csv(file = "data/all2016.csv")
data2018 <- read_csv(file = "data/all2016.csv")
data2016 <- read_csv(file = "data/all2016.csv")
data2016 <- read_csv(file = "./data/all2016.csv")
data2016 <- read_csv(file = "data/all2016.csv")
data2016 <- read_csv(file = "data/all2016.csv",
na = character())
joe <- read_csv(file = "https://raw.githubusercontent.com/maxtoki/baseball_R/master/data/dimaggio.1941.csv")
View(joe)
joe %>%
select(Date, Opp, PA, H) %>%
head(10)
joe %>%
count(HIT)
#add a variable indicating whether or not he got a hit in the game
joe %>%
mutate(HIT = ifelse(H > 0, 1,0)) -> joe
joe %>%
count(HIT)
joe %>%
count(HIT) %>%
kable("Number of Games by whether DiMaggio got at least one hit (1) or not (0)")
library(knitr)
joe %>%
count(HIT) %>%
kable("Number of Games by whether DiMaggio got at least one hit (1) or not (0)")
joe %>%
count(HIT) %>%
kable(caption = "Number of Games by whether DiMaggio got at least one hit (1) or not (0)")
#function to calculate streak
streaks <- function(y){
x <- rle(y)
class(x) <- "list"
return(as_tibble(x))
}
joe %>%
pull(HIT) %>%
streaks()
joe %>%
pull(HIT) %>%
streaks() %>%
filter(values == 1) %>%
pull(lengths)
moving_average <- function(df, width){
N <- nrow(df)
df %>%
transmute(Game = rollmean(1:N, k = width, fill = NA),
Average = rollsum(H, width, fill = NA)/
rollsum(AB, width, fill = NA))
}
joe_ma <- moving_average(joe,10)
library(zoo)
moving_average <- function(df, width){
N <- nrow(df)
df %>%
transmute(Game = rollmean(1:N, k = width, fill = NA),
Average = rollsum(H, width, fill = NA)/
rollsum(AB, width, fill = NA))
}
joe_ma <- moving_average(joe,10)
joe_ma %>%
ggplot(aes(x = Game, y = Average)) +
geom_line() +
geom_hline(data = summarize(joe, bavg = sum(H)/sum(AB)),
aes(yintercept = bavg)) +
geom_rug(data = filter(joe, HIT == 1),
aes(Rk, .3*HIT), sides = "b")
joe %>%
count(HIT) %>%
kable(caption = "Number of Games by whether DiMaggio got at least one hit (1) or not (0).")
random_mix <- function(y){
y %>%
sample() %>%
streaks() %>%
filter(values == 1) %>%
arrange(-length) %>%
head(1) %>%
pull(length)
}
replicate(1000, random_mix(joe$HIT))
y = joe$HIT
y %>%
sample() %>%
streaks() %>%
filter(values == 1)
random_mix <- function(y){
y %>%
sample() %>%
streaks() %>%
filter(values == 1) %>%
arrange(-lengths) %>%
head(1) %>%
pull(length)
}
replicate(1000, random_mix(joe$HIT))
y %>%
sample() %>%
streaks() %>%
filter(values == 1) %>%
arrange(-lengths)
random_mix <- function(y){
y %>%
sample() %>%
streaks() %>%
filter(values == 1) %>%
arrange(-lengths) %>%
head(1) %>%
pull(lengths)
}
replicate(1000, random_mix(joe$HIT))
#run similulation experiment
#you can think of replication as a for loop
joe_random <- replicate(r, random_mix(joe$HIT))
r = 10000 #number of replications
#run similulation experiment
#you can think of replication as a for loop
joe_random <- replicate(r, random_mix(joe$HIT))
joe_random %>%
as_tibble(streak.long = joe_random)
joe_random
sim.result %>%
as_tibble(streak.long = joe_random)
sim.result <- as_tibble(streak.long = joe_random)
sim.result <- tibble(streak.long = joe_random)
sim.result %>%
ggplot(aes(x = streak.long)) +
geom_histogram()
sim.result %>%
ggplot(aes(x = streak.long)) +
geom_histogram() +
theme_bw()
sim.result %>%
ggplot(aes(x = streak.long)) +
geom_histogram() +
theme_bw() +
labs(title = paste("Longest streak from each random season (r = ",r,")"),
x = "longest streak")
sim.result %>%
ggplot(aes(x = streak.long)) +
geom_histogram() +
theme_bw() +
labs(title = paste("Longest streak from each random season (r = ",r,")", sep = ""),
x = "longest streak")
r = 50000 #number of replications
#run similulation experiment
#you can think of replication as a for loop
joe_random <- replicate(r, random_mix(joe$HIT))
sim.result <- tibble(streak.long = joe_random)
sim.result %>%
ggplot(aes(x = streak.long)) +
geom_histogram() +
theme_bw() +
labs(title = paste("Longest streak from each random season (r = ",r,")", sep = ""),
x = "longest streak")
sim.result %>%
ggplot(aes(x = streak.long)) +
geom_histogram() +
theme_bw() +
labs(title = paste("Longest streak from each random season (r = ",r,")", sep = ""),
x = "longest streak") +
geom_vline(xintercept = 56)
sum(joe_random >= 56)/r
joe_ma %>%
ggplot(aes(x = Game, y = Average)) +
geom_line() +
geom_hline(data = summarize(joe, bavg = sum(H)/sum(AB)),
aes(yintercept = bavg)) +
geom_rug(data = filter(joe, HIT == 1),
aes(Rk, .3*HIT), sides = "b")
library(Lahman)
Batting %>% filter(yearID == 2018)
Batting %>% filter(yearID == 2018) %>% count(playerID)
Batting %>% filter(yearID == 2018) %>% count()
Batting %>%
filter(yearID >= 2000) %>%
group_by(playerID, yearID) %>%
summarize(H = sum(H),
AB = sum(AB)) %>%
mutate(AVG = H/AB) %>%
filter(AVG > 0.350)
Batting %>%
filter(yearID >= 2000) %>%
group_by(playerID, yearID) %>%
summarize(H = sum(H),
AB = sum(AB)) %>%
mutate(AVG = H/AB) %>%
filter(AB > 500, AVG > 0.350)
Batting %>%
filter(yearID >= 2000) %>%
group_by(playerID, yearID) %>%
summarize(H = sum(H),
AB = sum(AB)) %>%
mutate(AVG = H/AB) %>%
filter(AB > 500, AVG > 0.350) %>%
left_join(select(Master, playerID, nameLast, nameFirst), by = "playerID")
astro.loc <- read.csv("/Users/kfcummiskey/Downloads/locationdf.csv")
plotloc <- astro.loc %>%
mutate(Location = ifelse(location==1,"H","A"))
ggplot(plotloc,aes(x=joiner,y=CS.perc,color=Location)) +
geom_point() +
geom_smooth(method = "lm",se=FALSE)+
labs(x= "Player Month Year", y= "Called Strike Percentage",
title= "Called Strike Percentage vs. Location",color= "Astros Location")
astro.loc
ggplot(plotloc,aes(x=month,y=CS.perc,color=Location, group = player_name)) +
geom_point() +
geom_smooth(method = "lm",se=FALSE)+
labs(x= "Player Month Year", y= "Called Strike Percentage",
title= "Called Strike Percentage vs. Location",color= "Astros Location")
ggplot(plotloc,aes(x=month.x,y=CS.perc,color=Location, group = player_name)) +
geom_point() +
geom_smooth(method = "lm",se=FALSE)+
labs(x= "Player Month Year", y= "Called Strike Percentage",
title= "Called Strike Percentage vs. Location",color= "Astros Location")
library(lubridate)
ggplot(plotloc,aes(x=month.x,y=CS.perc,color=Location, group = player_name, shape = game_year)) +
geom_point() +
geom_smooth(method = "lm",se=FALSE)+
labs(x= "Player Month Year", y= "Called Strike Percentage",
title= "Called Strike Percentage vs. Location",color= "Astros Location")
plotloc %>%
mutate(date = my(month.x,game_year))
plotloc %>%
mutate(date = dmy(1,month.x,game_year))
plotloc %>%
mutate(date = dmy("1",month.x,game_year))
plotloc %>%
mutate(date = dmy(paste("1",month.x,game_year, sep = " ")))
plotloc %>%
mutate(date = dmy(paste("1",month.x,game_year, sep = " "))) -> plotloc
ggplot(plotloc,aes(x=date,y=CS.perc,color=Location, group = player_name)) +
geom_point() +
geom_smooth(method = "lm",se=FALSE)+
labs(x= "Player Month Year", y= "Called Strike Percentage",
title= "Called Strike Percentage vs. Location",color= "Astros Location")
ggplot(plotloc,aes(x=date,y=CS.perc,color=Location, group = player_name)) +
geom_point() +
geom_smooth(se=FALSE)+
labs(x= "Player Month Year", y= "Called Strike Percentage",
title= "Called Strike Percentage vs. Location",color= "Astros Location")
ggplot(plotloc,aes(x=date,y=CS.perc,color=Location)) +
geom_point() +
geom_smooth(se=FALSE)+
labs(x= "Player Month Year", y= "Called Strike Percentage",
title= "Called Strike Percentage vs. Location",color= "Astros Location")
joe %>%
count(HIT) %>%
kable(caption = "Number of Games by whether DiMaggio got at least one hit (1) or not (0).")
# game-by-game records for DiMaggio's 1941 season
file = "dimaggio.1941.csv"
path = "https://raw.githubusercontent.com/maxtoki/baseball_R/master/data/"
joe <- read_csv(file = paste(file,path,sep=""))
joe <- read_csv(file = paste(path,file,sep=""))
joe_ma
joe_ma %>% head(15)
268+1375+6179-168-1275-6079
999*345
cher.raw <- read.table(http://www.isi-stats.com/isi2/data/cherdata.txt)
cher.raw <- read.table("http://www.isi-stats.com/isi2/data/cherdata.txt")
cher.raw %>% filter(alc.post %in% c("yes","no"))
head(cher.row)
head(cher.raw)
cher.raw <- read.table("http://www.isi-stats.com/isi2/data/cherdata.txt",)
cher.raw <- read.table("http://www.isi-stats.com/isi2/data/cherdata.txt", header = TRUE)
cher.raw %>% filter(alc.post %in% c("yes","no"))
cher.raw <- read.table("http://www.isi-stats.com/isi2/data/cherdata.txt", header = TRUE)
cher.raw %>% filter(alc.post %in% c("yes","no"))
library(tidyverse)
cher.raw %>% filter(alc.post %in% c("yes","no"))
sample(1:16)
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE,fig.height = 3, message= FALSE, warning = FALSE)
# Chunk 2
library(tidyverse)
library(knitr)
# game-by-game records for DiMaggio's 1941 season
file = "dimaggio.1941.csv"
path = "https://raw.githubusercontent.com/maxtoki/baseball_R/master/data/"
joe <- read_csv(file = paste(path,file,sep=""))
joe %>%
select(Date, Opp, PA, H) %>%
head(10)
#add a variable indicating whether or not he got a hit in the game
joe %>%
mutate(HIT = ifelse(H > 0, 1,0)) -> joe
joe %>%
count(HIT) %>%
kable(caption = "Number of Games by whether DiMaggio got at least one hit (1) or not (0).")
# Chunk 3
#function to calculate streak
streaks <- function(y){
x <- rle(y)
class(x) <- "list"
return(as_tibble(x))
}
joe %>%
pull(HIT) %>%
streaks() %>%
filter(values == 1) %>%
pull(lengths)
# Chunk 4
library(zoo)
moving_average <- function(df, width){
N <- nrow(df)
df %>%
transmute(Game = rollmean(1:N, k = width, fill = NA),
Average = rollsum(H, width, fill = NA)/
rollsum(AB, width, fill = NA))
}
joe_ma <- moving_average(joe,10)
joe_ma %>%
ggplot(aes(x = Game, y = Average)) +
geom_line() +
geom_hline(data = summarize(joe, bavg = sum(H)/sum(AB)),
aes(yintercept = bavg)) +
geom_rug(data = filter(joe, HIT == 1),
aes(Rk, .3*HIT), sides = "b")
# Chunk 5
# this function shuffles the y vector and returns the longest streak
random_mix <- function(y){
y %>%
sample() %>%
streaks() %>%
filter(values == 1) %>%
arrange(-lengths) %>%
head(1) %>%
pull(lengths)
}
r = 50000 #number of replications
#run similulation experiment
#you can think of replication as a for loop
joe_random <- replicate(r, random_mix(joe$HIT))
sim.result <- tibble(streak.long = joe_random)
sim.result %>%
ggplot(aes(x = streak.long)) +
geom_histogram() +
theme_bw() +
labs(title = paste("Longest streak from each random season (r = ",r,")", sep = ""),
x = "longest streak") +
geom_vline(xintercept = 56)
sum(joe_random >= 56)/r
joe %>% head(5)
data2008 <- read_csv("data/all2008.csv")
View(data2008)
library(baseballr)
scrape_savant_leaderboards(year = 2017)
davis =  scrape_statcast_savant_batter(start_date = "2017-05-01",
end_date = "2017-05-31",
playerid = 448801)
davis =  scrape_statcast_savant_batter(start_date = "2017-05-01",
end_date = "2017-05-31",
playerid = "448801")
davis =  scrape_statcast_savant(start_date = "2017-05-01",
end_date = "2017-05-31",
playerid = "448801")
library(lubridate)
"2017-05-01" - "1970-01-01"
ymd("2017-05-01") - ymd("1970-01-01")
as_date(17287)
davis =  scrape_statcast_savant(start_date = 17287,
end_date = 17287+30,
playerid = "448801")
davis =  scrape_statcast_savant(start_date = as_date(17287),
end_date = as_date(17287+30),
playerid = "448801")
davis =  scrape_statcast_savant(start_date = as_date(17287),
end_date = as_date(17287+30))
rlang::last_error()
update.packages()
Y
Y
update.packages()
remove.packages()
remove.packages('baseballr')
devtools::install_github("billpetti/baseballr")
devtools::install_github("BillPetti/baseballr")
devtools::install_github("BillPetti/baseballr")
devtools::install_github("BillPetti/baseballr")
devtools::install_github("BillPetti/baseballr")
library(devtools)
devtools::install_github("BillPetti/baseballr")
install_github("BillPetti/baseballr")
