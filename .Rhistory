beta_post[t,] = beta_post[t-1,]
#draw from the jumping distribution
beta_prop = as.vector(rmvnorm(1,mean = beta_post[t,],
sigma = diag(c(0.14^2,0.17^2, 0.01^2))))
#Calculate the ratio of densities
log_numerator = log_post(y,x,beta_prop,mu,Sigma)
log_denominator = log_post(y,x,beta_post[t,],mu,Sigma)
r = exp(log_numerator - log_denominator)
# Select either theta or theta_star
cutoff = runif(1)
if(cutoff < min(r,1)){
beta_post[t,] = beta_prop
}
}
beta_post = data.frame(iteration = 1:M, beta_post)
colnames(beta_post)[2:4] = c("beta0", "beta1", "beta2")
beta_post %>% ggplot(aes(x = iteration, y = beta1)) + geom_line()
# burnin
#beta_post = beta_post %>% filter(iteration > 500)
beta_post1 = beta_post
beta_post = matrix(rep(0,3*M),ncol = 3)
beta_post[1,] = c(0,-5,0)
for(t in 2:M){
beta_post[t,] = beta_post[t-1,]
#draw from the jumping distribution
beta_prop = as.vector(rmvnorm(1,mean = beta_post[t,],
sigma = diag(c(0.14^2,0.17^2, 0.01^2))))
#Calculate the ratio of densities
log_numerator = log_post(y,x,beta_prop,mu,Sigma)
log_denominator = log_post(y,x,beta_post[t,],mu,Sigma)
r = exp(log_numerator - log_denominator)
# Select either theta or theta_star
cutoff = runif(1)
if(cutoff < min(r,1)){
beta_post[t,] = beta_prop
}
}
beta_post = data.frame(iteration = 1:M, beta_post)
colnames(beta_post)[2:4] = c("beta0", "beta1", "beta2")
beta_post %>% ggplot(aes(x = iteration, y = beta1)) + geom_line()
# burnin
#beta_post = beta_post %>% filter(iteration > 500)
beta_post2 = beta_post
beta1 = data.frame(iteration = 1:M, chain1 = beta_post1[,3],
chain2 = beta_post2[,3])
beta1 %>% ggplot(aes(x = iteration)) +
geom_line(aes(y = chain1, color = "red")) +
geom_line(aes(y = chain2, color = "blue"))
dev.off()
rm(list = ls())
library(tidyverse)
library(tidyverse)
library(mvtnorm)
theta = matrix(rep(0,2*M), ncol = 2)
M = 5000
theta = matrix(rep(0,2*M), ncol = 2)
head(theta)
theta[1,] = c(3,3)
head(theta)
rmvnorm(1,theta[1,],
sigma = 0.25^diag(2))
rmvnorm(1,theta[1,],
sigma = 0.25^2*diag(2))
library(tidyverse)
library(mvtnorm)
#number of iterations
M = 5000
#vector to store theta
theta = matrix(rep(0,2*M), ncol = 2)
#Step 1
theta[1,] = c(3,3)
for(t in 2:M){
#Step 2a
theta_star = rmvnorm(1,theta[t-1,],
sigma = 0.25^2*diag(2))
#Step 2b
log_numerator = dmvnorm(theta_star, mean = c(0,0),
sigma = diag(2))
log_denominator = dmvnorm(theta[t-1,], mean = c(0,0),
sigma = diag(2))
r = exp(log_numerator - log_denominator)
#Step 2c
cutoff = runif(1)
if(cutoff < min(r,1)){
theta[t,] = theta_star
} else {
theta[t, ] = theta[t-1,]
}
for(t in 2:M){
#Step 2a
theta_star = rmvnorm(1,theta[t-1,],
sigma = 0.25^2*diag(2))
#Step 2b
log_numerator = dmvnorm(theta_star, mean = c(0,0),
sigma = diag(2))
log_denominator = dmvnorm(theta[t-1,], mean = c(0,0),
sigma = diag(2))
r = exp(log_numerator - log_denominator)
#Step 2c
cutoff = runif(1)
if(cutoff < min(r,1)){
theta[t,] = theta_star
} else {
theta[t, ] = theta[t-1,]
}
}
library(tidyverse)
library(mvtnorm)
#number of iterations
M = 5000
#vector to store theta
theta = matrix(rep(0,2*M), ncol = 2)
#Step 1
theta[1,] = c(3,3)
for(t in 2:M){
#Step 2a
theta_star = rmvnorm(1,theta[t-1,],
sigma = 0.25^2*diag(2))
#Step 2b
log_numerator = dmvnorm(theta_star, mean = c(0,0),
sigma = diag(2))
log_denominator = dmvnorm(theta[t-1,], mean = c(0,0),
sigma = diag(2))
r = exp(log_numerator - log_denominator)
#Step 2c
cutoff = runif(1)
if(cutoff < min(r,1)){
theta[t,] = theta_star
} else {
theta[t, ] = theta[t-1,]
}
}
library(tidyverse)
library(mvtnorm)
#number of iterations
M = 5000
#vector to store theta
theta = matrix(rep(0,2*M), ncol = 2)
#Step 1
theta[1,] = c(3,3)
for(t in 2:M){
#Step 2a
theta_star = rmvnorm(1,theta[t-1,],
sigma = 0.25^2*diag(2))
#Step 2b
log_numerator = dmvnorm(theta_star, mean = c(0,0),
sigma = diag(2), log = TRUE)
log_denominator = dmvnorm(theta[t-1,], mean = c(0,0),
sigma = diag(2), log = TRUE)
r = exp(log_numerator - log_denominator)
#Step 2c
cutoff = runif(1)
if(cutoff < min(r,1)){
theta[t,] = theta_star
} else {
theta[t, ] = theta[t-1,]
}
}
head(theta)
theta_post = data.frame(iteration = 1:M, theta)
colnames(theta_post)[2:3] = c("theta1", "theta2")
head(theta_post)
theta_post %>% ggplot(aes(x = theta1, y = theta2)) +
geom_point()
theta_post %>% ggplot(aes(x = theta1, y = theta2)) +
geom_point(size = 1)
theta_post %>% ggplot(aes(x = iteration, y = theta1)) +
geom_line()
theta_post %>% ggplot(aes(x = theta1)) +
geom_density()
library(tidyverse)
library(titanic)
library(mvtnorm)
View(titanic_train)
#Some Data Analysis
titanic_train$Survived = as.factor(titanic_train$Survived)
titanic_train$Sex_num = ifelse(titanic_train$Sex == "male",1,0)
titanic_train %>% count(Sex, Survived) %>% group_by(Sex) %>%
mutate(prop = round(prop.table(n),2)) %>% select(-n) %>% spread(Sex,prop)
(0.19/0.81)/(0.74/0.26)
model = glm(Survived ~ Sex + Fare, family = "binomial",
data = titanic_train)
summary(model)
exp(coef(model))
library(tidyverse)
library(titanic)
library(mvtnorm)
View(titanic_train)
#Did gender affect survival?
#Some Data Analysis
titanic_train$Survived = as.factor(titanic_train$Survived)
titanic_train$Sex_num = ifelse(titanic_train$Sex == "male",1,0)
titanic_train %>% count(Sex, Survived) %>% group_by(Sex) %>%
mutate(prop = round(prop.table(n),2)) %>% select(-n) %>% spread(Sex,prop)
titanic_train %>% ggplot(aes(x = Survived, y = Fare)) + geom_boxplot()
# Investigate the effect of gender on survival
#crude effect
#odds ratio comparing men to women
#Maybe we also want to adjust for Fare
#frequentist model adjusting for Fare
model = glm(Survived ~ Sex + Fare, family = "binomial",
data = titanic_train)
summary(model)
exp(coef(model))
#helper function
expit = function(x){ (exp(x))/(1 + exp(x) )}
#function to calculate the density of the log posterior
#up to a constant of proportionality
log_post <- function(y, x, beta, mu, sigma){
linear_predictor = x %*% beta
prob = expit(linear_predictor)
prob[is.infinite(prob)] = 1
prob[is.na(prob)] = 1
likelihood = rep(0, length(prob))
likelihood[y == 1] = prob[y == 1]
likelihood[y == 0] = 1- prob[y == 0]
likelihood[likelihood == 0] = 0.00000001
log_prior = dmvnorm(beta, mu, sigma, log = TRUE)
return(sum(log(likelihood)) + log_prior)
}
y = titanic_train$Survived
x = as.matrix(titanic_train[,c(13,10)])
x = cbind(rep(1,nrow(x)), x)
#Parameters of prior
mu = c(0,0,0)
Sigma = 20*diag(3)
#number of iterations
M = 10000
#store posterior draws
beta_post = matrix(rep(0,3*M),ncol = 3)
beta_post[1,] = c(0,0,0)
for(t in 2:M){
beta_post[t,] = beta_post[t-1,]
#draw from the jumping distribution
beta_prop = as.vector(rmvnorm(1,mean = beta_post[t,],
sigma = diag(c(0.14^2,0.17^2, 0.01^2))))
#Calculate the ratio of densities
log_numerator = log_post(y,x,beta_prop,mu,Sigma)
log_denominator = log_post(y,x,beta_post[t,],mu,Sigma)
r = exp(log_numerator - log_denominator)
# Select either theta or theta_star
cutoff = runif(1)
if(cutoff < min(r,1)){
beta_post[t,] = beta_prop
}
}
beta_post = data.frame(iteration = 1:M, beta_post)
colnames(beta_post)[2:4] = c("beta0", "beta1", "beta2")
beta_post %>% ggplot(aes(x = iteration, y = beta1)) +
geom_point()
beta_post %>% ggplot(aes(x = iteration, y = beta1)) +
geom_line()
log(0.088)
beta_post %>% ggplot(aes(x = beta1)) + geom_density()
beta_post %>% ggplot(aes(x = exp(beta1))) + geom_density()
mu = c(0,0,0)
Sigma = diag(3)
#number of iterations
M = 10000
#store posterior draws
beta_post = matrix(rep(0,3*M),ncol = 3)
beta_post[1,] = c(0,0,0)
for(t in 2:M){
beta_post[t,] = beta_post[t-1,]
#draw from the jumping distribution
beta_prop = as.vector(rmvnorm(1,mean = beta_post[t,],
sigma = diag(c(0.14^2,0.17^2, 0.01^2))))
#Calculate the ratio of densities
log_numerator = log_post(y,x,beta_prop,mu,Sigma)
log_denominator = log_post(y,x,beta_post[t,],mu,Sigma)
r = exp(log_numerator - log_denominator)
# Select either theta or theta_star
cutoff = runif(1)
if(cutoff < min(r,1)){
beta_post[t,] = beta_prop
}
}
beta_post = data.frame(iteration = 1:M, beta_post)
colnames(beta_post)[2:4] = c("beta0", "beta1", "beta2")
beta_post %>% ggplot(aes(x = iteration, y = beta1)) +
geom_line()
beta_post %>% ggplot(aes(x = exp(beta1))) + geom_density()
beta_post %>% ggplot(aes(x = beta1)) + geom_density()
titanic_train %>% count(Sex, Survived) %>% group_by(Sex) %>%
mutate(prop = round(prop.table(n),2)) %>% select(-n) %>% spread(Sex,prop)
(0.19/0.81)/(0.74/0.26)
library(tidyverse)
dev.off()
rm(list = ls())
gun_ownership_url = 'http://www.washingtonpost.com/wp-srv/health/interactives/guns/ownership.html'
gun_ownership = readHTMLTable(gun_ownership_url, header = TRUE, which = 1)
gun_ownership = gun_ownership[-1, ]
parse_num = function (x) as.numeric(sub(',', '', x))
gun_ownership = select(gun_ownership, State = 1, Total = 2, Yes = 3,
`Yes %` = 4, No = 5, `No %` = 6) %>%
mutate_each(funs(parse_num), -State)
head(gun_ownership)
install.packages("XML")
library(XML)
gun_ownership_url = 'http://www.washingtonpost.com/wp-srv/health/interactives/guns/ownership.html'
gun_ownership = readHTMLTable(gun_ownership_url, header = TRUE, which = 1)
gun_ownership = gun_ownership[-1, ]
parse_num = function (x) as.numeric(sub(',', '', x))
gun_ownership = select(gun_ownership, State = 1, Total = 2, Yes = 3,
`Yes %` = 4, No = 5, `No %` = 6) %>%
mutate_each(funs(parse_num), -State)
head(gun_ownership)
suicide = read_csv(file = "Downloads/SUICIDE2005.csv")
head(suicide)
rm(list = ls())
states = read_csv(file = "Desktop/statesGuns.csv")
View(states)
View(states)
states %>% ggplot(aes(x = GunsPercent)) + geom_histogram()
states %>% ggplot(aes(x = SuicideRate)) + geom_histogram()
states %>% ggplot(aes(x = GunsPercent, y = SuicideRate)) + geom_point()
states %>% ggplot(aes(x = GunsPercent, y = SuicideRate, label = State)) +
geom_point() + geom_text()
states %>% ggplot(aes(x = SuicideRate)) + geom_histogram()
lm(SuicideRate ~ GunsPercent ,data = states)
model = lm(SuicideRate ~ GunsPercent ,data = states)
summary(model)
model = lm(SuicideRate ~ GunsPercent + BachelorPerc ,data = states)
model = lm(SuicideRate ~ GunsPercent + BachelorsPercent ,data = states)
summary(model)
dev.off()
rm(list = ls())
GPA = read_csv(file = "Desktop/Tintle ISI Ch10 SleepGPA data.txt")
library(tidyverse)
states = read_csv(file = "Desktop/statesGuns.csv")
View(states)
states %>% ggplot(aes(x = GunsPercent)) + geom_histogram()
states %>% ggplot(aes(x = SuicideRate)) + geom_histogram()
states %>% ggplot(aes(x = GunsPercent, y = SuicideRate)) +
geom_point()
states %>% ggplot(aes(x = GunsPercent, y = SuicideRate,
label = State)) +
geom_point() + geom_text()
states %>% ggplot(aes(x = GunsPercent, y = SuicideRate,
label = State)) +
geom_point() + geom_text() + geom_smooth(method = "lm")
model = lm(SuicideRate ~ GunsPercent, data = states)
summary(model)
states %>% ggplot(aes(x = BachelorsPercent, y = GunsPercent,
label = State)) +
geom_point() + geom_smooth(method = "lm")
states %>% ggplot(aes(x = BachelorsPercent, y = SuicideRate,
label = State)) +
geom_point() + geom_smooth(method = "lm")
model_adjusted = lm(SuicideRate ~ GunsPercent + BachelorsPercent,
data = states)
summary(model_adjusted)
View(states)
View(states)
View(states)
head(states)
states %>% ggplot(aes(x = BachelorsPercent, y = SuicideRate,
label = State)) +
geom_point() + geom_smooth(method = "lm") +
theme(text = element_text(size = 12))
states %>% ggplot(aes(x = BachelorsPercent, y = SuicideRate,
label = State)) +
geom_point() + geom_smooth(method = "lm") +
theme(text = element_text(size = 16))
model_adjusted = lm(SuicideRate ~ GunsPercent + BachelorsPercent,
data = states)
summary(model_adjusted)
library(tidyverse)
states = read_csv(file = "Desktop/statesGuns.csv")
head(states)
states %>% ggplot(aes(x = GunsPercent)) + geom_histogram()
states %>% ggplot(aes(x = SuicideRate)) + geom_histogram()
states %>% ggplot(aes(x = GunsPercent, y = SuicideRate,
label = State)) +
geom_point() + geom_text() + geom_smooth(method = "lm")
model = lm(SuicideRate ~ GunsPercent, data = states)
summary(model)
model = lm(SuicideRate ~ GunsPercent + BachelorsPercent, data = states)
summary(model)
fortify(model_adjusted) %>% ggplot(aes(x = .fitted, y = .resid)) + geom_point() +
geom_hline(yintercept = 0) + labs(x = "Predicted Values", y = "Residuals",
title = "Residuals vs. predicted values")
fortify(model_adjusted) %>% ggplot(aes(x = .resid)) + geom_histogram() + labs(x = "Residuals",
title = "Histogram of residuals")
library(tidyverse)
racer <- read_csv(file = "Downloads/data.csv")
View(racer)
racer %>% ggplot(aes(x = TopSpeedReached)) + geom_histogram()
racer %>% filter(TopSpeedReached > 150)
View(racer %>% filter(TopSpeedReached > 150))
library(tidyverse)
IOCT = read_csv(file = "Desktop/IOCT_27MAR.csv")
IOCT %>% ggplot(x = height, y = IOCT.Time) + geom_point()
View(IOCT)
library(tidyverse)
IOCT = read_csv(file = "Desktop/IOCT_27MAR.csv")
View(IOCT)
IOCT %>% ggplot(x = height, y = IOCT.Time) + geom_point()
IOCT %>% ggplot(aes(x = height, y = IOCT.Time)) +
geom_point()
source('~/.active-rstudio-document', echo=TRUE)
IOCT %>% ggplot(aes(x = height, y = IOCT.Time)) +
geom_point() + geom_smooth(method = "lm")
cor(IOCT$height,IOCT$IOCT.Time)
IOCT %>% ggplot(aes(x = height, y = IOCT.Time,
color = sex)) +
geom_point()
summary(lm(IOCT.time ~ height, data = IOCT))
summary(lm(IOCT.Time ~ height, data = IOCT))
summary(lm(IOCT.Time ~ height  + sex, data = IOCT))
dev.off()
library(tidyverse)
IOCT = read_csv(file = "Desktop/IOCT_27MAR.csv")
279/(279+39)
39/(279+39)
310/(310 + 26)
library(tidyverse)
fev = read.table('http://jse.amstat.org/datasets/fev.dat.txt')
View(fev)
fev = as.tibble(fev)
fev %>% group_by(SEX) %>% summarise(mean(AGE))
colnames(fev) = c("AGE", "FEV", "HEIGHT", "SEX", "SMOKE")
fev = as.tibble(fev)
fev %>% group_by(SEX) %>% summarise(mean(AGE))
fev %>% ggplot(aes(y = AGE, color = SEX)) + geom_histogram()
fev %>% ggplot(aes(x = AGE, color = SEX)) + geom_histogram()
fev %>% ggplot(aes(x = AGE, color = factor(SEX))) + geom_histogram()
fev %>% ggplot(aes(x = AGE, fill = factor(SEX))) + geom_histogram()
fev %>% ggplot(aes(x = AGE, fill = factor(SEX))) + geom_boxplot()
fev %>% ggplot(aes(y = AGE, fill = factor(SEX))) + geom_boxplot()
fev %>% ggplot(aes(y = AGE, x = factor(SEX))) + geom_boxplot()
fev %>% group_by(SEX) %>% summarise(mean(AGE))
getwd()
setwd("./Documents/MA388/")
Research Question: \textit{How has the rate of walks changed over the history of baseball?}
Games
library(Lahman)
library(tidyverse)
Games
```{r, message = FALSE}
library(tidyverse)
library(Lahman)
Teams %>% head(1)
Teams %>% head(2)
Teams %>%
group_by() %>%
summarize(walks_per_game = sum(BBA)/(IPouts/27)) -> walks
Teams %>%
group_by() %>%
summarize(walks_per_game = sum(BBA)/(sum(IPouts)/27)) -> walks
Teams %>%
group_by(yearID) %>%
summarize(walks_per_game = sum(BBA)/(sum(IPouts)/27)) -> walks
walks %>% head(3)
walks %>%
ggplot(aes(x = yearID, y = walks_per_game)) +
geom_point()
#Calculate the walk rate per 9 innings by season
Teams %>%
group_by(yearID,lgID) %>%
summarize(walks_per_game = sum(BBA)/(sum(IPouts)/27)) -> walks
walks %>% head(3)
walks %>%
ggplot(aes(x = yearID, y = walks_per_game, color = lgID)) +
geom_point()
walks %>%
ggplot(aes(x = yearID, y = walks_per_game)) +
geom_point()
walks %>%
ggplot(aes(x = yearID, y = walks_per_game)) +
geom_point() +
geom_smooth()
walks %>%
filter(yearID > 1919) %>%
ggplot(aes(x = yearID, y = walks_per_game)) +
geom_point()
#Calculate the walk rate per 9 innings by season
Teams %>%
group_by(yearID,lgID) %>%
summarize(walks_per_game = sum(BBA)/(sum(IPouts)/27)) -> walks
walks %>%
filter(yearID > 1919) %>%
ggplot(aes(x = yearID, y = walks_per_game, color = lgID)) +
geom_point()
Teams %>% head(2)
#Calculate the walk rate per 9 innings by season
Teams %>%
group_by(yearID) %>%
summarize(walks_per_game = sum(BB)/sum(G)) -> walks
walks %>% head(3)
walks %>%
filter(yearID > 1919) %>%
ggplot(aes(x = yearID, y = walks_per_game)) +
geom_point()
walks %>%
ggplot(aes(x = yearID, y = walks_per_game)) +
geom_point()
walks %>% arrange(walks_per_game) %>% head(3)
walks %>% arrange(desc(walks_per_game)) %>% head(3)
#Calculate the walk rate per 9 innings by season
Teams %>%
group_by(yearID) %>%
summarize(walks_per_game = sum(BB)/sum(G),
SO_per_game = sum(SO)/sum(G)) -> walks
walks %>% head(3)
walks %>%
mutate(walks_SO_ratio = walks_per_game/SO_per_game)
walks = walks %>%
mutate(walks_SO_ratio = walks_per_game/SO_per_game)
walks %>%
ggplot(aes(x = yearID, y = walks_SO_ratio)) +
geom_point()
