by = c("NEW.STATE" = "STATE")) %>%
rename(Runs.New.State = Mean) %>%
replace_na(list(Runs.New.State = 0)) %>%
mutate(run_value = Runs.New.State - Runs.State +
RUNS.SCORED) -> data2016
data2016 %>% write_csv(path = "../MA388_Solutions/data2016.csv")
#get Altuve's playerID
Master %>%
filter(nameFirst == "Jose", nameLast == "Altuve") %>%
pull(retroID) -> altuve.id
library(Lahman)
#get Altuve's playerID
Master %>%
filter(nameFirst == "Jose", nameLast == "Altuve") %>%
pull(retroID) -> altuve.id
data2016 %>%
filter(BAT_ID == altuve.id,
BAT_EVENT_FL == TRUE) -> altuve
altuve %>%
select(STATE, NEW.STATE, run_value) %>%
slice(1:3)
library(tidyverse)
library(Lahman)
# load data2016 (as of page 115 in text) and RUNS (page 115 in text)
data2016 <- read_csv(file = "./data/data2016.csv")
RUNS <- read_csv(file = "./data/expectedRUNs2016.csv")
# add run value of the play (page 116)
data2016 %>%
left_join(select(RUNS, -Outs), by = "STATE") %>%
rename(Runs.State = Mean) %>%
left_join(select(RUNS, -Outs),
by = c("NEW.STATE" = "STATE")) %>%
rename(Runs.New.State = Mean) %>%
replace_na(list(Runs.New.State = 0)) %>%
mutate(run_value = Runs.New.State - Runs.State +
RUNS.SCORED) -> data2016
#get Altuve's playerID
Master %>%
filter(nameFirst == "Jose", nameLast == "Altuve") %>%
pull(retroID) -> altuve.id
data2016 %>%
filter(BAT_ID == altuve.id,
BAT_EVENT_FL == TRUE) -> altuve
altuve %>%
select(STATE, NEW.STATE, run_value) %>%
slice(1:3)
RUNS <- read_csv(file = "./data/expectedRUNs2016.csv")
library(tidyverse)
rownames(RUNS_out) = c("000","001","010","011",
"100","101","110", "111")
RUNS_out = matrix(round(RUNS$Mean,2), 8,3)
colnames(RUNS_out) = c("0 outs", "1 out", "2 outs")
rownames(RUNS_out) = c("000","001","010","011",
"100","101","110", "111")
kable(RUNS_out)
library(tidyverse)
kable(RUNS_out)
library(knitr)
kable(RUNS_out)
altuve %>%
ggplot(aes(x = BASES, y = run_value)) +
geom_jitter(width = 0.25, alpha = 0.5) +
geom_hline(yintercept = 0, color = "blue") +
xlab("RUNNERS")
altuve %>%
group_by(BASES) %>%
summarize(RUNS = sum(run_value),
PA = n()) -> Runs_Altuve
Runs_Altuve
Runs_Altuve %>% summarize(RE24 = sum(RUNS))
library(Lahman)
library(tidyverse)
Batting
Master %>% filter(nameLast == "Eaton") %>% pull(playerID)
library(tidyverse)
library(Lahman)
Master %>% filter(nameLast == "Ortiz", nameFirst = "David")
Master %>% filter(nameLast == "Ortiz", nameFirst == "David")
Batting %>% filter(playerID == "ortizda01")
data2016 <- read_csv("data/data2016.csv")
names(data2016)
data2016 %>%
filter(EVENT_CD == 23) -> home_runs
home_runs %>%
group_by(RUNS.SCORED) %>%
summarise(n = n())
home_runs %>%
group_by(RUNS.SCORED) %>%
summarise(n = n()) %>%
mutate(perc = n/sum(n))
#average number of runs scored
home_runs %>%
summarise(mean(RUNS.SCORED))
summarise(mean_run_value = mean(run_value)
)
data2016 %>%
left_join(select(RUNS, -Outs), by = "STATE") %>%
rename(Runs.State = Mean) %>%
left_join(select(RUNS, -Outs),
by = c("NEW.STATE" = "STATE")) %>%
rename(Runs.New.State = Mean) %>%
replace_na(list(Runs.New.State = 0)) %>%
mutate(run_value = Runs.New.State - Runs.State +
RUNS.SCORED) -> data2016
RUNS <- read_csv(file = "./data/expectedRUNs2016.csv")
data2016 %>%
left_join(select(RUNS, -Outs), by = "STATE") %>%
rename(Runs.State = Mean) %>%
left_join(select(RUNS, -Outs),
by = c("NEW.STATE" = "STATE")) %>%
rename(Runs.New.State = Mean) %>%
replace_na(list(Runs.New.State = 0)) %>%
mutate(run_value = Runs.New.State - Runs.State +
RUNS.SCORED) -> data2016
data2016 %>% write_csv(path = "data/data2016.csv")
#recall data2016 contains a line for every play
data2016 <- read_csv("data/data2016.csv")
#get only home runs
data2016 %>%
filter(EVENT_CD == 23) -> home_runs
#number and percent of homeruns by runs scored
home_runs %>%
group_by(RUNS.SCORED) %>%
summarise(n = n()) %>%
mutate(perc = round(n/sum(n),2))
#average number of runs scored
home_runs %>%
summarise(mean(RUNS.SCORED))
#calculate the average run value of a home run
home_runs %>%
summarise(mean_run_value = mean(run_value))
#calculate the average run value of a home run
mean_hr <- home_runs %>%
summarise(mean_run_value = mean(run_value))
home_runs %>%
ggplot(aes(run_value)) +
geom_histogram() +
geom_vline(data = mean_hr, aes(xintercept = mean_run_value),
color = "blue", size = 1.5)
home_runs %>%
ggplot(aes(run_value)) +
geom_histogram() +
geom_vline(data = mean_hr, aes(xintercept = mean_run_value),
color = "blue", size = 1.5) +
annotate("text", 1.7,2000, label = "Mean Run\nValue",
color = "blue")
library(Lahman)
library(tidyverse)
#import the data
fields<-read_csv("https://raw.githubusercontent.com/maxtoki/baseball_R/master/data/fields.csv")
data2016 <- read_csv("data/data2016.csv")
#mutate the dataset
data2016 %>%
mutate(RUNS= AWAY_SCORE_CT + HOME_SCORE_CT,
HALF.INNING = paste(GAME_ID,INN_CT,BAT_HOME_ID),
RUNS.SCORED =
(BAT_DEST_ID > 3) + (RUN1_DEST_ID >3) +
(RUN2_DEST_ID > 3) + (RUN3_DEST_ID >3)) ->
data2016
data2016 %>%
left_join(select(RUNS, -Outs), by = "STATE")%>%
rename(Runs.State=Mean)%>%
left_join(select(RUNS,-Outs),
by = c("NEW.STATE" = "STATE"))%>%
rename(Runs.New.State = Mean)%>%
replace_na(list(Runs.New.State = 0))%>%
mutate(run_value = Runs.New.State - Runs.State + RUNS.SCORED)->data2016
data2016
names(data2016)
data2016 %>%
left_join(select(RUNS, -Outs), by = "STATE")%>%
rename(Runs.State=Mean)%>%
left_join(select(RUNS,-Outs),
by = c("NEW.STATE" = "STATE"))%>%
rename(Runs.New.State = Mean)%>%
replace_na(list(Runs.New.State = 0))%>%
mutate(run_value = Runs.New.State - Runs.State + RUNS.SCORED)->data2016
data2016$RUNS
#mean run value for a double
data2016%>%
filter(EVENT_CD==21) -> doubles
mean_doubles<-doubles%>%
summarize(mean_run_value=mean(run_value))
data2016 %>%
left_join(select(RUNS), by = "STATE")%>%
rename(Runs.State=Mean)%>%
left_join(select(RUNS,-Outs),
by = c("NEW.STATE" = "STATE"))%>%
rename(Runs.New.State = Mean)%>%
replace_na(list(Runs.New.State = 0))%>%
mutate(run_value = Runs.New.State - Runs.State + RUNS.SCORED)->data2016
data2016 %>%
left_join(select(.$RUNS), by = "STATE")%>%
rename(Runs.State=Mean)%>%
left_join(select(RUNS,-Outs),
by = c("NEW.STATE" = "STATE"))%>%
rename(Runs.New.State = Mean)%>%
replace_na(list(Runs.New.State = 0))%>%
mutate(run_value = Runs.New.State - Runs.State + RUNS.SCORED)->data2016
data2016 %>%
left_join(select(RUNS, -Outs), by = "STATE")%>%
rename(Runs.State=Mean)%>%
left_join(select(RUNS,-Outs),
by = c("NEW.STATE" = "STATE"))%>%
rename(Runs.New.State = Mean)%>%
replace_na(list(Runs.New.State = 0))%>%
mutate(run_value = Runs.New.State - Runs.State + RUNS.SCORED)->data2016
data2016 %>% select(RUNS)
data2016 %>%
left_join(data2016 %>% select(RUNS, -Outs), by = "STATE")%>%
rename(Runs.State=Mean)%>%
left_join(select(RUNS,-Outs),
by = c("NEW.STATE" = "STATE"))%>%
rename(Runs.New.State = Mean)%>%
replace_na(list(Runs.New.State = 0))%>%
mutate(run_value = Runs.New.State - Runs.State + RUNS.SCORED)->data2016
data2016 %>%
left_join(data2016 %>% select(RUNS), by = "STATE")%>%
rename(Runs.State=Mean)%>%
left_join(select(RUNS,-Outs),
by = c("NEW.STATE" = "STATE"))%>%
rename(Runs.New.State = Mean)%>%
replace_na(list(Runs.New.State = 0))%>%
mutate(run_value = Runs.New.State - Runs.State + RUNS.SCORED)->data2016
data2016 %>%
left_join(data2016 %>% select(RUNS, -Outs), by = "STATE")%>%
rename(Runs.State=Mean)%>%
left_join(select(RUNS,-Outs),
by = c("NEW.STATE" = "STATE"))%>%
rename(Runs.New.State = Mean)%>%
replace_na(list(Runs.New.State = 0))%>%
mutate(run_value = Runs.New.State - Runs.State + RUNS.SCORED)->data2016
mean_doubles
data2016 %>% select(RUNS, -Outs)
data2016 %>% select(RUNS, -NOUTS)
library(mlbgameday)
gamedat <- get_payload(start = "2016-05-01", end = "2016-05-31")
library(tidyverse)
#Run this code once
#library(mlbgameday)
#gamedat <- get_payload(start = "2016-05-01", end = "2016-05-31")
pitches <- inner_join(gamedat$pitch, gamedat$atbat,
by = c("num","url"))
#recommend writing to someplace on your harddrive
pitches %>% write_csv("C:/Users/kevin.cummiskey/pitches.csv")
#Read in the pitches you saved earlier
pitches <- read_csv(file = "C:/Users/kevin.cummiskey/Data/pitches.csv")
pitches %>% group_by(type) %>% summerize(n = n())
pitches %>% group_by(type) %>% summarize(n = n())
names(pitches)
pitches %>% filter(type == "C") %>% head(3)
pitches %>% filter(des_es == "C") %>% head(3)
pitches %>% group_by(des_es) %>% summarize(n = n())
pitches %>% group_by(des_es, type) %>% summarize(n = n())
pitches %>% select(des, type) %>% head(20)
pitches %>% filter(type = "*B") %>% select(des, type) %>% head(20)
pitches %>% filter(type == "*B") %>% select(des, type) %>% head(20)
pitches %>% filter(type == "S") %>% select(des, type) %>% head(20)
#Number of pitches by type (strike, swinging strike, etc)
pitches %>% group_by(type) %>% summarize(n = n())
pitches %>% filter(type == "T") %>% select(des, type) %>% head(20)
pitches %>% filter(type == "W") %>% select(des, type) %>% head(20)
pitches %>% filter(type == "Q") %>% select(des, type) %>% head(20)
pitches %>% filter(type == "D") %>% select(des, type) %>% head(20)
pitches %>% filter(type == "E") %>% select(des, type) %>% head(20)
#we only want balls and called strikes
taken <- pitches %>%
filter(type %in% c("C","B"))
#Let's visualize the pitches
source("kzoneplot.R")
k_zone_plot %+% sample_n(taken, 10000) +
aes(color = type) +
geom_point(alpha = 0.1) +
scale_color_manual(values = c("blue", "black"))
library(mgcv)
strike_mod <- gam(type == "C" ~ s(px, pz),
family = binomial,
data = taken)
summary(strike_mod)
plot(strike_mod)
k_zone_plot %+% sample_n(taken, 10000) +
aes(color = type) +
geom_point(alpha = 0.1) +
scale_color_manual(values = c("blue", "black"))
# a pitch right down the middle
predict(strike_mod,
newdata = dataframe(px = 0, py = 2.5),
type = "response")
# a pitch right down the middle
predict(strike_mod,
newdata = data.frame(px = 0, py = 2.5),
type = "response")
# a pitch right down the middle
predict(strike_mod,
newdata = data.frame(px = 0, pz = 2.5),
type = "response")
summary(strike_mod)
# a pitch on the inside corner for a right-handed batter
predict(strike_mod,
newdata = data.frame(px = -1, pz = 2.5),
type = "response")
# a pitch on the outside corner for a right-handed batter
predict(strike_mod,
newdata = data.frame(px = 1, pz = 2.5),
type = "response")
gam.check(strike_mod)
# a pitch on the inside corner for a right-handed batter
predict(strike_mod,
newdata = data.frame(px = -0.9, pz = 2.5),
type = "response")
# a pitch on the outside corner for a right-handed batter
predict(strike_mod,
newdata = data.frame(px = 0.9, pz = 2.5),
type = "response")
# a pitch on the inside corner for a right-handed batter
predict(strike_mod,
newdata = data.frame(px = -1, pz = 2.5),
type = "response")
# a pitch on the outside corner for a right-handed batter
predict(strike_mod,
newdata = data.frame(px = 1, pz = 2.5),
type = "response")
library(modelr)
#create a grid of points in the strike zone
grid <- taken %>%
data_grid(px = seq_range(px, n = 100),
pz = seq_range(pz, n = 100))
#get predicted values from the model on the grid
grid_hats <- strike_mod %>%
augment(type.predict = "response", newdata = grid)
library(broom)
#get predicted values from the model on the grid
grid_hats <- strike_mod %>%
augment(type.predict = "response", newdata = grid)
#plot the results
k_zone_plot %+% grid_hats +
geom_tile(aes(fill = .fitted),alpha = 0.7) +
scale_fill_gradient(low = "gray92", high = "blue")
#create a grid of points in the strike zone
grid <- taken %>%
data_grid(px = seq_range(px, n = 10),
pz = seq_range(pz, n = 10))
#get predicted values from the model on the grid
grid_hats <- strike_mod %>%
augment(type.predict = "response", newdata = grid)
#plot the results
k_zone_plot %+% grid_hats +
geom_tile(aes(fill = .fitted),alpha = 0.7) +
scale_fill_gradient(low = "gray92", high = "blue")
#create a grid of points in the strike zone
grid <- taken %>%
data_grid(px = seq_range(px, n = 100),
pz = seq_range(pz, n = 100))
#get predicted values from the model on the grid
grid_hats <- strike_mod %>%
augment(type.predict = "response", newdata = grid)
#plot the results
k_zone_plot %+% grid_hats +
geom_tile(aes(fill = .fitted),alpha = 0.7) +
scale_fill_gradient(low = "gray92", high = "blue")
hand_mod <- gam(type == "C" ~ s(px,pz) + stand,
family = binomial,
data = taken)
summary(hand_mod)
exp(0.178)
head(taken$stand)
hand_mod <- gam(type == "C" ~ s(px,pz) + stand + p_throws,
family = binomial,
data = taken)
summary(hand_mod)
exp(0.118)
hand_mod <- gam(type == "C" ~ s(px,pz) + stand,
family = binomial,
data = taken)
#LEFT CORNER STRIKE
#right-handed batter
predict(hand_mod,
newdata = data.frame(px = -1, pz = 2.5, stand = "R"))
#left-handed batter
predict(hand_mod,
newdata = data.frame(px = -1, pz = 2.5, stand = "L"))
#RIGHT CORNER STRIKE
#right-handed batter
predict(hand_mod,
newdata = data.frame(px = 1, pz = 2.5, stand = "R"))
#RIGHT CORNER STRIKE
#right-handed batter
predict(hand_mod,
newdata = data.frame(px = 1, pz = 2.5, stand = "R"))
#LEFT CORNER STRIKE
#right-handed batter
predict(hand_mod,
newdata = data.frame(px = -1, pz = 2.5, stand = "R"))
#left-handed batter
predict(hand_mod,
newdata = data.frame(px = -1, pz = 2.5, stand = "L"))
#RIGHT CORNER STRIKE
#right-handed batter
predict(hand_mod,
newdata = data.frame(px = 1, pz = 2.5, stand = "R"))
#left-handed batter
predict(hand_mod,
newdata = data.frame(px = -1, pz = 2.5, stand = "L"),
type = "reponse")
hand_mod <- gam(type == "C" ~ s(px,pz) + stand,
family = binomial,
data = taken)
summary(hand_mod)
#LEFT CORNER STRIKE
#right-handed batter
predict(hand_mod,
newdata = data.frame(px = -1, pz = 2.5, stand = "R"),
type = "response")
#left-handed batter
predict(hand_mod,
newdata = data.frame(px = -1, pz = 2.5, stand = "L"),
type = "reponse")
#LEFT CORNER STRIKE
#right-handed batter
predict(hand_mod,
newdata = data.frame(px = -1, pz = 2.5, standR = 1),
type = "response")
#LEFT CORNER STRIKE
#right-handed batter
predict(hand_mod,
newdata = data.frame(px = -1, pz = 2.5, stand = "R"),
type = "response")
#left-handed batter
predict(hand_mod,
newdata = data.frame(px = -1, pz = 2.5, stand = "L"),
type = "response")
#RIGHT CORNER STRIKE
#right-handed batter
predict(hand_mod,
newdata = data.frame(px = 1, pz = 2.5, stand = "R"))
#RIGHT CORNER STRIKE
#right-handed batter
predict(hand_mod,
newdata = data.frame(px = 1, pz = 2.5, stand = "R"),
type = "response")
#left-handed batter
predict(hand_mod,
newdata = data.frame(px = 1, pz = 2.5, stand = "L"),
type = "response")
#RIGHT CORNER STRIKE
#right-handed batter
predict(hand_mod,
newdata = data.frame(px = 1, pz = 2.5, stand = "R"),
type = "response")
#left-handed batter
predict(hand_mod,
newdata = data.frame(px = 1, pz = 2.5, stand = "L"),
type = "response")
hand_grid <- taken %>%
data_grid(px = seq_range(px, n = 100),
pz = seq_range(pz, n = 100),
stand)
hand_grid_hats <- hand_mod %>%
augment(type.predict = "response",
newdata = hand_grid)
#plot the results
tile_plot <- k_zone_plot %+% grid_hats +
geom_tile(aes(fill = .fitted),alpha = 0.7) +
scale_fill_gradient(low = "gray92", high = "blue")
tile_plot
#plot predictions by handedness
tile_plot %+% hand_grid_hats +
facet_grid(stand)
#plot predictions by handedness
tile_plot %+% hand_grid_hats +
facet(stand)
#plot predictions by handedness
tile_plot %+% hand_grid_hats +
facet_grid(stand ~ .)
#plot predictions by handedness
tile_plot %+% hand_grid_hats +
facet_grid(. ~ stand)
diffs <- hand_grid_hats %>%
group_by(px,pz) %>%
summarize(N - n(), .fitted = diff(.fitted))
diffs <- hand_grid_hats %>%
group_by(px,pz) %>%
summarize(N = n(), .fitted = diff(.fitted))
tile_plot %+% diffs
head(diffs)
head(hand_grid_hats)
(0.60/0.4)/(0.58/0.42)
k_zone_plot %+% sample_n(taken, 10000) +
aes(color = type) +
geom_point(alpha = 0.1) +
scale_color_manual(values = c("blue", "black"))
lm(type == "S" ~ px + pz, data = taken)
linear_model = lm(type == "S" ~ px + pz, data = taken)
summary(linear_model)
linear_model = lm(type == "C" ~ px + pz, data = taken)
summary(linear_model)
taken %>% group_by(stand) %>% summarize(N = n())
library(tidyverse)
urlRemote = "https://raw.githubusercontent.com/"
pathGithub = "maxtoki/baseball_R/master/data/"
fileName = "game_log_header.csv"
game_log_headers <- read_csv(file = paste0(urlRemote,pathGithub,fileName))
# this is the path of the folder where you downloaded the game logs.
my_path = "C:/Users/kevin.cummiskey/Documents/MA388_GameLogs/"
files = list.files(path = my_path)
files = paste(my_path,files, sep = "")
#read in data
game_logs = files %>%
map(read_csv,
col_names = names(game_log_headers),
na = character()) %>%
reduce(rbind)
