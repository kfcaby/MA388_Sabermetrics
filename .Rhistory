gather(key = "result", value = "teamID", -yearID) %>%
select(-result) %>%
mutate(playoffs = 1)
#Merge with my_teams
my_teams = my_teams %>%
left_join(my_series, by = c("yearID", "teamID")) %>%
replace_na(list(playoffs = 0))
#let's check if we did this correctly
my_teams %>%
group_by(yearID) %>%
summarize(teams.playoffs = sum(playoffs))
my_teams <- Teams %>%
filter(yearID >= 1997, yearID <= 2001)
#determine which teams made the playoffs each year
#Use the SeriesPost data
my_series <- SeriesPost %>%
filter(yearID >= 1997, yearID <= 2001)%>%
select(yearID, teamIDwinner, teamIDloser) %>%
gather(key = "result", value = "teamID", -yearID) %>%
select(-result) %>%
mutate(playoffs = 1)
#Merge with my_teams, replace NA, and change
#playoff to a factor variable
my_teams = my_teams %>%
left_join(my_series, by = c("yearID", "teamID")) %>%
replace_na(list(playoffs = 0)) %>%
mutate(playoffs = playoffs)
#let's check if we did this correctly
my_teams %>%
group_by(yearID) %>%
summarize(teams.playoffs = sum(playoffs))
my_teams %>%
ggplot(aes(x = W, y = R, color = factor(playoffs))) +
geom_point()
library(ggrepel)
my_teams$teamID
my_teams %>%
ggplot(aes(x = W, y = R, color = factor(playoffs))) +
geom_point() +
labs(x = "Wins", y = "Runs Scored", color = "Made Playoffs",
title = "Wins and Making the Playoffs") +
geom_text_repel(data = filter(my_teams, teamID == "OAK"),
aes(x = W, y = R, label = teamID))
my_teams %>%
ggplot(aes(x = W, y = R, color = factor(playoffs))) +
geom_point() +
labs(x = "Wins", y = "Runs Scored", color = "Made Playoffs",
title = "Wins and Making the Playoffs") +
geom_text_repel(data = filter(my_teams, teamID == "OAK"),
aes(x = W, y = R, color = playoffs,label = teamID))
my_teams %>%
ggplot(aes(x = W, y = R, color = factor(playoffs))) +
geom_point() +
labs(x = "Wins", y = "Runs Scored", color = "Made Playoffs",
title = "Wins and Making the Playoffs") +
geom_text_repel(data = filter(my_teams, teamID == "OAK"),
aes(x = W, y = R, color = factor(playoffs),label = teamID))
my_teams %>%
ggplot(aes(x = W, y = R, color = factor(playoffs))) +
geom_point() +
labs(x = "Wins", y = "Runs Scored", color = "Made Playoffs",
title = "Wins and Making the Playoffs") +
geom_text_repel(data = filter(my_teams, teamID == "OAK"),
aes(x = W, y = R,label = teamID))
my_teams %>%
ggplot(aes(x = W, y = R, color = factor(playoffs))) +
geom_point() +
labs(x = "Wins", y = "Runs Scored", color = "Made Playoffs",
title = "Wins and Making the Playoffs") +
geom_text_repel(data = filter(my_teams, teamID == "OAK"),
aes(x = W, y = R,label = paste(teamID,yearID)))
my_teams
my_teams %>%
ggplot(aes(x = W, y = R, color = factor(playoffs))) +
geom_point() +
labs(x = "Wins", y = "Runs Scored", color = "Made Playoffs",
title = "Wins and Making the Playoffs") +
geom_text_repel(data = filter(my_teams, teamID == "OAK"),
aes(x = W, y = R,label = paste(name,yearID)))
my_teams %>%
ggplot(aes(x = W, y = R, color = factor(playoffs))) +
geom_point() +
labs(x = "Wins", y = "Runs Scored", color = "Made Playoffs",
title = "Wins and Making the Playoffs") +
geom_text_repel(data = filter(my_teams, teamID == "OAK"),
aes(x = W, y = R,label = paste(teamID,yearID)))
#calculate the run differential
my_teams = my_teams %>%
mutate(RD = R - RA)
my_teams %>%
ggplot(aes(x= RD,y = W)) +
geom_point()
my_teams %>%
ggplot(aes(x= RD,y = W, color = factor(playoffs))) +
geom_point()
my_teams %>%
ggplot(aes(x= RD,y = W, color = factor(playoffs))) +
geom_point() +
geom_text_repel(data = filter(my_teams, W > 110),
aes(x = RD, Y = W, label = paste(teamID,yearID)))
my_teams %>% filter(W > 110)
#subset to get my teams
my_teams <- Teams %>%
filter(yearID >= 1997, yearID <= 2001)
#determine which teams made the playoffs each year
#Use the SeriesPost data
my_series <- SeriesPost %>%
filter(yearID >= 1997, yearID <= 2001)%>%
select(yearID, teamIDwinner, teamIDloser) %>%
gather(key = "result", value = "teamID", -yearID) %>%
select(-result) %>%
mutate(playoffs = 1)
head(my_series)
#determine which teams made the playoffs each year
#Use the SeriesPost data
my_series <- SeriesPost %>%
filter(yearID >= 1997, yearID <= 2001)%>%
select(yearID, teamIDwinner, teamIDloser) %>%
gather(key = "result", value = "teamID", -yearID) %>%
select(-result) %>%
mutate(playoffs = 1) %>%
unique()
head(my_series)
#Merge with my_teams, replace NA, and change
#playoff to a factor variable
my_teams = my_teams %>%
left_join(my_series, by = c("yearID", "teamID")) %>%
replace_na(list(playoffs = 0)) %>%
mutate(playoffs = playoffs)
#let's check if we did this correctly
my_teams %>%
group_by(yearID) %>%
summarize(teams.playoffs = sum(playoffs))
my_teams %>%
ggplot(aes(x = W, y = R, color = factor(playoffs))) +
geom_point() +
labs(x = "Wins", y = "Runs Scored", color = "Made Playoffs",
title = "Wins and Making the Playoffs") +
geom_text_repel(data = filter(my_teams, teamID == "OAK"),
aes(x = W, y = R,label = paste(teamID,yearID)))
#calculate the run differential
my_teams = my_teams %>%
mutate(RD = R - RA)
my_teams %>%
ggplot(aes(x= RD,y = W, color = factor(playoffs))) +
geom_point() +
geom_text_repel(data = filter(my_teams, W > 110),
aes(x = RD, Y = W, label = paste(teamID,yearID)))
my_teams %>%
ggplot(aes(x= RD,y = W, color = factor(playoffs))) +
geom_point() +
geom_text_repel(data = filter(my_teams, W > 110),
aes(label = paste(teamID,yearID)))
#let's check if we did this correctly
my_teams %>%
group_by(yearID) %>%
summarize(teams.playoffs = sum(playoffs))
my_Teams$G
my_teams$G
my_teams %>%
ggplot(aes(x= RD,y = W, color = factor(playoffs))) +
geom_point() +
geom_text_repel(data = filter(my_teams, W > 110 | W < 60),
aes(label = paste(teamID,yearID)))
my_teams %>%
ggplot(aes(x= RD,y = W, color = factor(playoffs))) +
geom_point() +
geom_text_repel(data = filter(my_teams, W > 110 | W < 60),
aes(label = paste(teamID,yearID))) +
geom_smooth(aes(x = RD, y = W))
my_teams %>%
ggplot(aes(x= RD,y = W, color = factor(playoffs))) +
geom_point() +
geom_text_repel(data = filter(my_teams, W > 110 | W < 60),
aes(label = paste(teamID,yearID))) +
geom_smooth(aes(x = RD, y = W), method= "lm")
#fit a linear regression model
lin.fit = lm(W ~ RD, data = my_teams)
summary(lin.fit)
library(broom)
my_teams %>%
augment(lin.fit, data = my_teams)
augment(lin.fit, data = my_teams)
my_teams = augment(lin.fit, data = my_teams)
my_teams %>%
ggplot(aes(x = W, y = .resid)) +
geom_point()
my_teams %>%
ggplot(aes(x = W, y = .resid, color = factor(playoffs))) +
geom_point()
my_teams %>%
ggplot(aes(x = W, y = .resid, color = factor(playoffs))) +
geom_point() +
geom_text_repel(data = filter(my_teams, abs(.resid) > 7.5),
aes(label = paste(teamID,yearID)))
library(Lahman)
library(tidyverse)
library(ggrepel)
#get teams in the 1997-2001 season
my_teams <- Teams %>%
filter(yearID >= 1997, yearID <= 2001)
#determine which teams made the playoffs each year
#Use the SeriesPost data
my_series <- SeriesPost %>%
filter(yearID >= 1997, yearID <= 2001)%>%
select(yearID, teamIDwinner, teamIDloser) %>%
gather(key = "result", value = "teamID", -yearID) %>%
select(-result) %>%
mutate(playoffs = 1) %>%
unique()
#Merge with my_teams, replace NAs, and change
#playoff to a factor variable
my_teams = my_teams %>%
left_join(my_series, by = c("yearID", "teamID")) %>%
replace_na(list(playoffs = 0))
#let's check if we did this correctly
my_teams %>%
group_by(yearID) %>%
summarize(teams.playoffs = sum(playoffs))
View(my_teams)
Teams %>%
ggplot(aes(x = HR, y = R)) +
geom_point()
my_teams %>%
ggplot(aes(x = HR, y = R)) +
geom_point()
my_teams %>%
ggplot(aes(x = H/AB, y = R)) +
geom_point()
my_teams = my_teams %>%
mutate(HR.std = scale(HR),
AVG.std = scale(AVG))
my_teams = my_teams %>%
mutate(HR.std = scale(HR),
AVG.std = scale(H/AB))
runs.model = lm(R ~ HR.std + AVG.std)
runs.model = lm(R ~ HR.std + AVG.std, data = my_teams)
summary(runs.model)
head(my_teams)
my_teams = my_teams %>%
mutate(OBP = (H + BB + HBP)/(AB + BB + HBP))
my_teams = my_teams %>%
mutate(OBP = (H + BB + HBP)/(AB + BB + HBP),
OBP.std = scale(OBP))
runs.model2 = lm(R ~ HR.std + OBP.std, data = my_teams)
summary(runs.model2)
library(tidyverse)
library(Lahman)
my_teams = Teams %>%
filter(yearID >= 1997, yearID <= 2001) %>%
mutate(RD = R - RA,
Wpct = W/(W+L))
#function to calculate expected wins
#using pythagorean formula
#arguments:
# R - runs scored
# RA - runs allowed
# k - exponent
# values:
# expected win percentage
pyt_wins <- function(R, RA, k){
return(R^k/(R^k + RA^k))
}
return(R^k/(R^k + RA^k))
#function to calculate expected wins
#using pythagorean formula
#arguments:
# R - runs scored
# RA - runs allowed
# k - exponent
# values:
# expected win percentage
pyt_wins <- function(R, RA, k = 2){
return(R^k/(R^k + RA^k))
}
my_teams = Teams %>%
filter(yearID >= 1997, yearID <= 2001) %>%
mutate(RD = R - RA,
Wpct = W/(W+L),
Wpct.pyt2 = pyt_wins(R,RA,2))
my_teams
my_teams %>%
ggplot(aes(x = RD, y = Wpct.pyt2)) +
geom_point()
library(broom)
#get Model 1 predicted win percentages
lin.fit <- lm(Wpct ~ RD, data = my_teams)
my_teams <- augment(lin.fit, data = my_teams)
#plot Model 1 and Model 2 predictions
my_teams %>%
ggplot(aes(x = RD, y = .fitted)) +
geom_line()
#plot Model 1 and Model 2 predictions
my_teams %>%
ggplot(aes(x = RD, y = .fitted)) +
geom_point(col = "red")
#plot Model 1 and Model 2 predictions
my_teams %>%
ggplot(aes(x = RD, y = .fitted)) +
geom_point(col = "red") +
geom_point(aes(x = RD, y = Wpct.pyt2))
#plot Model 1 and Model 2 predictions
my_teams %>%
ggplot(aes(x = RD, y = .fitted)) +
geom_point(col = "red") +
geom_point(aes(x = RD, y = Wpct.pyt2)) +
labs(x = "Run Differential",
y = "Win Percentage",
title = "Predicted Win Percentage - Model 1 and 2 (1997-2001)")
summary(lin.fit)
# Model 1 RSE
# we could either use the lin.fit object
summary(lin.fit)$sigma
# or calculate it directly
sqrt(mean(my_teams$.resid^2))
# Note this is very close to the Residual Standard Error
# which you could also use
summary(lin.fit)$sigma
# Model 2 RMSE
# calculate residuals
my_teams = my_teams %>%
mutate(.resid.pyt2 = Wpct - Wpct.pyt2)
# calculate RMSE for Model 2
sqrt(mean(my_teams$.resid.pyt2^2))
summary(lin.fit)
# let's look at min, max, 1Q, 3Q, median residual
my_teams %>%
summarise(min(.resid.pyt2),
quantile(.resid.pyt2, 0.25),
median(.resid.pyt2),
quantile(.resid.pyt2, 0.75),
max(.resid.pyt2))
my_teams %>%
ggplot(aes(x = Wpct,
y = .resid.pyt2)) +
geom_point()
my_teams %>%
ggplot(aes(x = Wpct,
y = .resid.pyt2)) +
geom_point() +
labs(x = "Win Percentage", y = "Residuals (Model 2)")
my_teams %>%
ggplot(aes(x = Wpct,
y = .resid.pyt2)) +
geom_point() +
labs(x = "Win Percentage", y = "Residuals",
title = "Residuals vs Win Percentage (Model 2)")
my_teams = my_teams %>%
mutate(logWratio = log(W/L),
logRratio = log(R/RA))
pytFit
#0 in formula means we don't include an intercept
pytFit <- lm(logWratio ~ 0 + logRratio, data = my_teams)
pytFit
pytFit$coefficients
pytFit$coefficients[1]
k = pytFit$coefficients[1]
#get predictions
my_teams = my_teams %>%
mutate(Wpct.pyt_k = pyt_wins(R,RA,k = k))
#get residuals
my_teams = my_teams %>%
mutate(.resid.pyt_k = Wpct - Wpct.pyt_k)
#calculate RMSE
sqrt(mean(my_teams$.resid.pyt_k^2))
my_teams %>%
summarise(min(.resid.pyt_k),
quantile(.resid.pyt_k, 0.25),
median(.resid.pyt_k),
quantile(.resid.pyt_k, 0.75),
max(.resid.pyt_k))
my_teams %>%
ggplot(aes(x = Wpct,
y = .resid.pyt_k)) +
geom_point() +
labs(x = "Win Percentage", y = "Residuals",
title = "Residuals vs Win Percentage (Model 3)")
#get the data
my_teams %>%
filter(teamID >= 1997, teamID <= 2001) %>%
mutate(RD = R - RA,
Wpct = W/(W + L))
library(tidyverse)
library(Lahman)
#get the data
my_teams %>%
filter(teamID >= 1997, teamID <= 2001) %>%
mutate(RD = R - RA,
Wpct = W/(W + L))
library(tidyverse)
library(Lahman)
#get the data
my_teams %>%
filter(teamID >= 1997, teamID <= 2001) %>%
mutate(RD = R - RA,
Wpct = W/(W + L))
#get the data
my_teams = Teams %>%
filter(teamID >= 1997, teamID <= 2001) %>%
mutate(RD = R - RA,
Wpct = W/(W + L))
#get the data
my_teams = Teams %>%
filter(yearID >= 1997, yearID <= 2001) %>%
mutate(RD = R - RA,
Wpct = W/(W + L))
#partition the data into five groups
my_teams %>% crossv_kfold(k = 5)
install.packages('tidymodels')
library(tidymodels)
#partition the data into five groups
my_teams %>% crossv_kfold(k = 5)
library(tidymodels)
#partition the data into five groups
my_teams %>% crossv_kfold(k = 5)
library(purrr)
#partition the data into five groups
my_teams %>% crossv_kfold(k = 5)
library(tidyverse)
library(Lahman)
#get the data
my_teams = Teams %>%
filter(yearID >= 1997, yearID <= 2001) %>%
mutate(RD = R - RA,
Wpct = W/(W + L))
#partition the data into five groups
partition = rep(1:5, length.out = 148)
partition
partition = sample(partition, replace = TRUE)
my_teams$partition = partition
# create empty vector to save RMSE for each fold
rmse = c()
test_teams = my_teams %>%
filter(partition == 1)
train_teams = my_teams %>%
filter(partition != 1)
#fit model
lin.fit.train = lm(Wpct ~ RD, data = train_teams)
coef(lin.fit.train)
#get predictions on test set
test_teams = test_teams %>%
mutate(Wpct.pred = coef(lin.fit.train)[1] + coef(lin.fit.train)[2]*RD)
View(test_teams)
#get predictions and residuals on test set
test_teams = test_teams %>%
mutate(Wpct.pred = coef(lin.fit.train)[1] + coef(lin.fit.train)[2]*RD,
.resid = Wpct - Wpct.pred)
rmse[1] = sqrt(mean(test_teams$.resid^2))
my_teams = Teams %>%
filter(yearID >= 1997, yearID <= 2001) %>%
mutate(RD = R - RA,
Wpct = W/(W + L))
#partition the data into five groups
set.seed(100)
partition = rep(1:5, length.out = 148)
partition = sample(partition, replace = TRUE)
my_teams$partition = partition
# create empty vector to save RMSE for each fold
rmse = c()
# perform cross validation
for(i in 1:5){
# test set
test_teams = my_teams %>%
filter(partition == i)
#training set
train_teams = my_teams %>%
filter(partition != i)
#fit model
lin.fit.train = lm(Wpct ~ RD, data = train_teams)
#get predictions and residuals on test set
test_teams = test_teams %>%
mutate(Wpct.pred = coef(lin.fit.train)[1] + coef(lin.fit.train)[2]*RD,
.resid = Wpct - Wpct.pred)
#calculate RMSE
rmse[i] = sqrt(mean(test_teams$.resid^2))
}
rmse
round(rmse,4)
mean(rmse)
round(mean(rmse),4)
round(162*mean(rmse),1)
round(162*rmse,1)
cubic.fit = lm(Wpct = RD + RD^2 + RD^3, data = my_teams)
cubic.fit = lm(Wpct ~ RD + RD^2 + RD^3, data = my_teams)
summary(cubic.fit)
cubic.fit = lm(Wpct ~ RD + I(RD^2) + I(RD^3), data = my_teams)
summary(cubic.fit)
cubic.fit = lm(Wpct ~ RD + I(RD^2) + I(RD^3) + I(RD^4), data = my_teams)
summary(cubic.fit)
cubic.fit = lm(Wpct ~ RD + I(RD^2) + I(RD^3) + I(RD^4) + I(RD^5), data = my_teams)
summary(cubic.fit)
lin.fit = lm(Wpct ~ RD, data = my_teams)
summary(lin.fit)
cubic.fit = lm(Wpct ~ RD + I(RD^2) + I(RD^3) + I(RD^4) + I(RD^5) + I(RD^6), data = my_teams)
summary(cubic.fit)
cubic.fit = lm(Wpct ~ RA + R + R*RD, data = my_teams)
summary(cubic.fit)
cubic.fit = lm(Wpct ~ RA + R + R*RD + I(R^2), data = my_teams)
summary(cubic.fit)
cubic.fit = lm(Wpct ~ RA + R + R*RA + I(R^2), data = my_teams)
summary(cubic.fit)
cubic.fit = lm(Wpct ~ HR + H + X2B + X3B, data = my_teams)
summary(cubic.fit)
cubic.fit = lm(Wpct ~ R + RA + HR + H + X2B + X3B, data = my_teams)
summary(cubic.fit)
cubic.fit = lm(Wpct ~ R + RA + HR + H + X2B + X3B + ERA, data = my_teams)
summary(cubic.fit)
library(tidyverse)
IOCT = read_csv(file = "https://raw.githubusercontent.com/kfcaby/MA388_Sabermetrics/master/IOCT_Data_Cleaned.csv")
sleep = data.frame()
View(sleep)
sleep = data.frame(ID = c(), Hours = c())
